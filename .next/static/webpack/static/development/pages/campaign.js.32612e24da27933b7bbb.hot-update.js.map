{"version":3,"file":"static/webpack/static/development/pages/campaign.js.32612e24da27933b7bbb.hot-update.js","sources":["webpack:///./components/SearchBox/SearchBox.js"],"sourcesContent":["import Downshift from 'downshift'\nimport React, { Component } from 'react'\nimport Application from '@/contexts/Application'\nimport LoadingIcon from '@/icons/loading.svg'\nimport SearchIcon from '@/icons/search.svg'\nimport debounce from '@/utilities/debounce'\nimport noop from '@/utilities/noop'\nimport objectMatch from '@/utilities/objectMatch'\nimport './SearchBox.scss'\n\nexport default class SearchBox extends Component {\n  static contextType = Application\n  static defaultProps = {\n    className: '',\n    clearOnSelect: true,\n    hotkeys: {},\n    limit: 10,\n    onHotKey: noop,\n    onSelect: noop,\n    placeholder: 'Search...',\n    renderOption: null,\n    url: '',\n  }\n  static displayName = 'SearchBox'\n\n  state = {\n    message: null,\n    options: [],\n    searchTerm: '',\n  }\n\n  downshift = React.createRef()\n  inputBox = React.createRef()\n  debouncedSearch = debounce(async (searchTerm = '') => {\n    const { limit, url } = this.props\n\n    if (!url || !searchTerm || searchTerm.length < 3) {\n      this.setState({\n        message: 'Enter at least 3 characters...',\n        options: [],\n        searching: false,\n      })\n      return undefined\n    }\n\n    const searchUrl = url.replace(':searchTerm', searchTerm)\n    const queryString = `limit=${limit}`\n\n    const response = await fetch(`${searchUrl}?${queryString}`)\n    const json = await response.json()\n\n    if (response.status === 200 && json.length) {\n      return this.setState({\n        message: '',\n        options: json,\n        searching: false,\n      })\n    }\n\n    return this.setState({\n      message: json.message || 'No results found...',\n      options: [],\n      searching: false,\n    })\n  }, 500)\n\n  componentDidMount = () => {\n    document.addEventListener('keydown', this.handleHotKeys)\n  }\n  componentWillUnmount = () => {\n    document.removeEventListener('keydown', this.handleHotKeys)\n  }\n\n  handleHotKeys = event => {\n    Object.entries(this.props.hotkeys).forEach(([name, keyCombo]) => {\n      if (objectMatch(event, keyCombo)) {\n        this.props.onHotKey(name, event, this)\n      }\n    })\n  }\n  handleKeyDown = event => {\n    if (event.key === 'Escape') {\n      this.inputBox.current.blur()\n    }\n  }\n  handleSearch = async (searchTerm = '') => {\n    this.setState({ message: 'Searching...', searching: true, searchTerm })\n    this.debouncedSearch(searchTerm)\n  }\n  handleSelect = option => {\n    const { clearOnSelect, onSelect } = this.props\n\n    onSelect(option)\n\n    if (clearOnSelect && !this.clearing) {\n      this.setState({ searchTerm: '' })\n    }\n  }\n\n  renderOption = (option, index, itemProps) => (\n    <li key={index} className=\"search-result\" {...itemProps}>\n      <b className=\"title\">{option.title}</b>\n      <div className=\"preview\">{option.preview}...</div>\n    </li>\n  )\n  render = () => {\n    const { className, placeholder } = this.props\n    const { message, options, searching } = this.state\n    const { theme } = this.context\n    const renderOption = this.props.renderOption || this.renderOption\n    const OverlayIcon = searching ? LoadingIcon : SearchIcon\n\n    return (\n      <Downshift\n        id=\"search-box\" ref={this.downshift}\n        itemToString={article => (article ? article.title : '')}\n        onInputValueChange={this.handleSearch}\n        onSelect={this.handleSelect}\n      >{({ getInputProps, getItemProps, getMenuProps, isOpen }) => (\n        <div\n          className={`${className} search-box ${isOpen ? 'open' : 'closed'}`}\n          style={{ color: theme.foreground }}\n        >\n          <input\n            {...getInputProps({\n              onKeyDown: this.handleKeyDown,\n            })}\n            className=\"input\" ref={this.inputBox}\n            placeholder={placeholder}\n            value={this.state.searchTerm}\n          />\n          {(searching || !options.length)\n            ? isOpen && <div className=\"search-results message\">{message}</div>\n            : isOpen && (\n              <ul {...getMenuProps()} className=\"search-results list\">\n                {options.map((option, index) => renderOption(\n                  option, index,\n                  getItemProps({ index, item: option, key: option._id }))\n                )}\n              </ul>\n            )}\n          <OverlayIcon className=\"search icon\" />\n        </div>\n      )}\n      </Downshift>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAHA;AACA;AALA;AACA;AADA;AAYA;AACA;AAbA;AAAA;AACA;AADA;AAeA;AAfA;AAAA;AACA;AADA;AAgBA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AADA;AAoBA;AACA;AACA;AAHA;AACA;AApBA;AAAA;AA2BA;AACA;AACA;AAHA;AACA;AA3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgCA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAKA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAMA;AADA;AAGA;AAAA;AACA;AACA;AANA;AASA;AAAA;AAEA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAFA;AAMA;AAAA;AAvBA;AA4BA;AACA;;;;;AAzIA;AACA;AADA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAHA;AACA;;;;;A","sourceRoot":""}