{"version":3,"file":"static/webpack/static/development/pages/user.js.699d978482201ea6e820.hot-update.js","sources":["webpack:///./pages/user.js"],"sourcesContent":["import { distanceInWordsToNow } from 'date-fns'\nimport React, { Component } from 'react'\nimport ArticleChildren from '@/components/ArticleChildren'\nimport Editable from '@/components/Editable'\nimport Toggle from '@/components/Toggle'\nimport Application from '@/contexts/Application'\nimport AdminIcon from '@/icons/Administrator'\nimport FavoriteIcon from '@/icons/favorite-on.svg'\nimport SheetIcon from '@/icons/sheet.svg'\nimport Error from '@/pages/_error'\nimport confirm from '@/utilities/confirm'\nimport pluck from '@/utilities/pluck'\nimport URI from '@/utilities/URI'\nimport './user.scss'\n\nconst UPDATABLE_FIELDS = ['email', 'favorites', 'name', 'username']\nconst formatTime = time => distanceInWordsToNow(time, { addSuffix: true })\n\nexport default class UserPage extends Component {\n  static contextType = Application\n  static defaultProps = {\n    httpStatusCode: 200,\n    message: '',\n    user: { anonymous: true },\n  }\n  static getInitialProps = async ({ query, req }) => {\n    const headers = pluck(req && req.headers, 'cookie')\n    const result = await (fetch(URI(req, `/api/user/${query.slug}`), { headers }))\n    const json = await result.json()\n\n    if (result.status !== 200) {\n      return {\n        httpStatusCode: result.status,\n        ...json,\n      }\n    }\n\n    return { user: json }\n  }\n  static getDerivedStateFromProps(props, state) {\n    if (props.user.username !== state.user.username) {\n      return {\n        ...state,\n        saved: pluck(props.user, UPDATABLE_FIELDS),\n        user: props.user,\n      }\n    }\n\n    return state\n  }\n\n  state = {\n    saved: pluck(this.props.user, UPDATABLE_FIELDS),\n    user: this.props.user,\n  }\n\n  get isDirty() {\n    const fromState = JSON.stringify(pluck(this.state.user, UPDATABLE_FIELDS))\n    const fromSaved = JSON.stringify(pluck(this.state.saved, UPDATABLE_FIELDS))\n\n    return (fromState !== fromSaved)\n  }\n\n  handleNameChange = name => this.setState({ user: { ...this.state.user, name } })\n  handleSave = async () => {\n    const response = await fetch(`/api/user/${this.state.user.username || ''}`, {\n      body: JSON.stringify(pluck(this.state.user, UPDATABLE_FIELDS)),\n      headers: { 'Content-Type': 'application/json' },\n      method: 'POST',\n    })\n\n    if (response.status === 200) {\n      const saved = await response.json()\n      return this.setState({ saved, user: { ...this.state.user, ...saved } })\n    }\n\n    return this.setState(await response.json())\n  }\n  handleToggleAdmin = async () => {\n    const { isAdmin, username } = this.state.user\n    const action = isAdmin ? 'revoke' : 'grant'\n    if (await confirm(`Are you sure you want to ${action} this user Admin privileges?`)) {\n      const response = await fetch(`/api/user/${username}`, {\n        body: JSON.stringify({ isAdmin: !isAdmin }),\n        headers: { 'Content-Type': 'application/json' },\n        method: 'POST',\n      })\n      if (response.status === 200) {\n        return this.setState({ user: await response.json() })\n      }\n\n      return this.setState(await response.json())\n    }\n\n    return undefined\n  }\n\n  render = () => {\n    const { httpStatusCode, message } = this.props\n    const { user: currentUser } = this.context\n    const { user } = this.state\n    const isEditable = user === currentUser || currentUser.isAdmin\n\n    if (httpStatusCode !== 200) {\n      return <Error statusCode={httpStatusCode} message={message} />\n    }\n\n    return (\n      <div className=\"user page\">\n        <div className=\"title-bar\">\n          <Editable\n            className=\"title\"\n            onChange={this.handleNameChange}\n            placeholder=\"Name\"\n            readOnly={!isEditable}\n            value={user.name}\n          />\n          {isEditable && this.isDirty && (\n            <button className=\"update safe\" onClick={this.handleSave}>Save</button>\n          )}\n          {currentUser.isAdmin\n            ? <Toggle\n                className=\"is-admin\"\n                onClick={this.handleToggleAdmin}\n                offIcon={AdminIcon} offProps={{ title: 'Not an Administrator' }}\n                onIcon={AdminIcon} onProps={{ title: 'Administrator' }}\n                value={user.isAdmin}\n              />\n            : (user.isAdmin && <AdminIcon className=\"is-admin toggle on\" />)\n          }\n        </div>\n        <div className=\"contents\">\n          <div className=\"user-info\">\n            <div className=\"row\">\n              <b>Username:</b> <span>{user.username}</span>\n            </div>\n            {user.email && (\n            <div className=\"row\">\n              <b>Email Address:</b> <span>{user.email}</span>\n            </div>\n            )}\n            <div className=\"row\">\n              <b>Joined:</b>\n              <span title={Date(user.createdAt).toLocaleString()}>\n                {formatTime(user.createdAt)}\n              </span>\n            </div>\n            <div className=\"row\">\n              <b>Last Login:</b>\n              <span title={Date(user.lastLogin).toLocaleString()}>\n                {formatTime(user.lastLogin)}\n              </span>\n            </div>\n          </div>\n\n          {user.favorites && <>\n            <ArticleChildren\n              articles={user.favorites}\n              caption=\"Favorites\"\n              icon={<FavoriteIcon className=\"favorites icon\" />}\n            />\n          </>}\n\n          {user.campaigns && <>\n            <ArticleChildren\n              articles={user.campaigns}\n              caption=\"Campaigns\"\n              icon={<SheetIcon />}\n              type=\"sheet\"\n            />\n          </>}\n\n          {user.sheets && <>\n            <ArticleChildren\n              articles={user.sheets}\n              caption=\"Sheets\"\n              icon={<SheetIcon />}\n              type=\"sheet\"\n            />\n          </>}\n        </div>\n      </div>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;AAiCA;AACA;AACA;AAFA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AACA;AAFA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAQA;AARA;AASA;AAAA;AAAA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AAaA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AACA;AALA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AAVA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AALA;AAOA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAIA;AAAA;AAEA;AAAA;AAIA;AAAA;AAEA;AAAA;AAQA;AACA;AACA;AAAA;AAAA;AAHA;AASA;AACA;AACA;AACA;AAJA;AAUA;AACA;AACA;AACA;AAJA;AAUA;AACA;;;;;;AAhIA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAtBA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AACA;;;;AA/BA;AACA;AADA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAHA;AACA;AAHA;;;;;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AACA;AAHA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAOA;AAPA;AACA;AADA;AAAA;AAYA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;A","sourceRoot":""}