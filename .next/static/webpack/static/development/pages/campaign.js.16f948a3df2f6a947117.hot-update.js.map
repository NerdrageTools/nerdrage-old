{"version":3,"file":"static/webpack/static/development/pages/campaign.js.16f948a3df2f6a947117.hot-update.js","sources":["webpack:///./components/Participants/Participants.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { Scrollbars } from 'react-custom-scrollbars'\nimport EditableList from '@/components/EditableList'\nimport PageLink from '@/components/PageLink'\nimport UserSearchBox from '@/components/SearchBox/UserSearchBox'\nimport NerdIcon from '@/icons/nerd.svg'\nimport RemoveIcon from '@/icons/remove.svg'\nimport compareBy from '@/utilities/compareBy'\nimport noop from '@/utilities/noop'\nimport pluck from '@/utilities/pluck'\nimport './Participants.scss'\n\nconst ORDER = {\n  editor: 2,\n  owner: 1,\n  player: 3,\n  removed: 4,\n}\n\nconst addParticipants = (map, users, addition) => {\n  users.forEach(user => {\n    map.set(user._id, {\n      ...(map.get(user._id) || user),\n      ...user,\n      ...addition,\n    })\n  })\n}\n\nexport default class Participants extends Component {\n  static defaultProps = {\n    className: '',\n    editors: [],\n    onSave: noop,\n    owners: [],\n    players: [],\n    readOnly: false,\n    saving: false,\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { editors, owners, players } = props\n    const { edits } = state\n\n    const map = new Map()\n    addParticipants(map, players, { level: 'player', order: ORDER.player })\n    addParticipants(map, editors, { level: 'editor', order: ORDER.editor })\n    addParticipants(map, owners, { level: 'owner', order: ORDER.owner })\n\n    const current = Array.from(map.values()).sort(compareBy('order'))\n\n    addParticipants(map, edits)\n    const participants = Array.from(map.values()).sort(compareBy('order'))\n\n    return { ...state, current, participants }\n  }\n\n  state = {\n    edits: [],\n    participants: [],\n  }\n\n  handleSetEdit = (user, edit = {}) => {\n    const { current, edits } = this.state\n    const exists = current.find(p => p._id === user._id)\n    const currentEdit = edits.find(e => e._id === user._id) || {}\n\n    const updated = edits.filter(e => e._id !== user._id)\n    if (edit.type === 'added' && !exists) {\n      updated.push({ ...user, ...edit, ...pluck(currentEdit, 'level', 'order') })\n    }\n    if (edit.type === 'removed' && exists && currentEdit.type !== 'removed') {\n      updated.push({ ...user, ...edit, ...pluck(currentEdit, 'level', 'order') })\n    }\n    if (edit.type === 'updated') {\n      updated.push({ ...user, ...edit })\n    }\n\n    this.setState({ edits: updated })\n  }\n\n  handleAddUser = user => {\n    this.handleSetEdit(user, { level: 'player', order: ORDER.player, type: 'added' })\n  }\n  handleSetPermission = (user, level) => {\n    this.handleSetEdit(user, { level, order: ORDER[level], type: 'updated' })\n  }\n  handleToggleRemoved = user => {\n    this.handleSetEdit(user, { level: 'removed', order: ORDER.removed, type: 'removed' })\n  }\n  handleSave = () => {\n    const { participants } = this.state\n    this.props.onSave({\n      editors: participants.filter(p => p.level === 'editor'),\n      owners: participants.filter(p => p.level === 'owner'),\n      players: participants.filter(p => p.level === 'player'),\n    })\n    this.setState({ edits: [] })\n  }\n\n  render = () => {\n    const { className, readOnly, saving } = this.props\n    const { participants } = this.state\n\n    return (\n      <div className={`participants ${className} ${saving ? 'loading' : ''}`}>\n        <Scrollbars className=\"contents\" universal>\n          <ul className=\"participant-list\">\n            {participants.map(user => (\n              <li className={`participant row ${user.type || ''}`} key={user._id}>\n                <NerdIcon className=\"nerd icon\" />\n                <PageLink className=\"display\" type=\"user\" slug={user.username}>\n                  <span className=\"name\">{user.name}</span>\n                  <span className=\"username\">{user.username}</span>\n                </PageLink>\n                {!readOnly && <>\n                  <EditableList\n                    className=\"role\"\n                    defaultValue={user.level}\n                    onChange={level => this.handleSetPermission(user, level)}\n                    options={['owner', 'editor', 'player']}\n                  />\n                  <RemoveIcon\n                    className=\"remove icon\"\n                    onClick={() => this.handleToggleRemoved(user)}\n                  />\n                </>}\n              </li>\n            ))}\n          </ul>\n        </Scrollbars>\n        {!readOnly && <>\n          <UserSearchBox\n            className=\"add-user\"\n            onSelect={this.handleAddUser}\n          />\n          {(this.state.edits.length !== 0) && (\n            <button className=\"save safe\" onClick={this.handleSave}>Save</button>\n          )}\n        </>}\n      </div>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAHA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;AAAA;AAAA;AAFA;AAdA;AAyBA;AACA;AAFA;AAKA;AAAA;AAAA;AAKA;AACA;;;;;;AAvGA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;AA1BA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;;;;;A","sourceRoot":""}