{"version":3,"file":"static/webpack/static/development/pages/sheet.js.3d3b69d9f90b58ba6ea3.hot-update.js","sources":["webpack:///./pages/sheet.js"],"sourcesContent":["import fetch from 'isomorphic-unfetch'\nimport React, { Component } from 'react'\nimport { Scrollbars } from 'react-custom-scrollbars'\nimport { CharacterModel, LayoutModel, Sheet as SfSheet } from 'sheetforge'\nimport Editable from '@/components/Editable'\nimport Application from '@/contexts/Application'\nimport defaultLayout from '@/data/defaultSheetLayout'\nimport confirm from '@/utilities/confirm'\nimport pluck from '@/utilities/pluck'\nimport URI from '@/utilities/URI'\nimport 'sheetforge/build/sheetforge.css'\nimport './sheet.scss'\n\nconst STATE_FIELDS = ['isEditable', 'isOwner', 'slug']\nconst UPDATABLE_FIELDS = ['title']\n\nexport default class Sheet extends Component {\n  static contextType = Application\n  static defaultProps = {\n    children: [],\n    data: {},\n    layout: defaultLayout,\n    slug: '',\n    title: '',\n  }\n\n  state = {\n    ...pluck(this.props, STATE_FIELDS),\n    saved: pluck(this.props, UPDATABLE_FIELDS),\n    title: this.props.title || this.context.router.query.title || 'Unnamed Character',\n  }\n\n  character = CharacterModel.create({})\n  layout = LayoutModel.create(defaultLayout)\n\n  static getInitialProps = async ({ query, req }) => {\n    const headers = pluck(req && req.headers, 'cookie')\n    const response = await fetch(URI(req, `/api/sheet/${query.slug}`), { headers })\n    const json = await response.json()\n    return { statusCode: response.status, ...json }\n  }\n\n  get isDirty() {\n    return (\n      this.state.title !== this.state.saved.title\n      || this.character.isDirty || this.layout.isDirty\n    )\n  }\n\n  updateSheet = ({ data = {}, layout = defaultLayout }) => {\n    this.character.set(data)\n    this.character.markAsClean()\n    this.layout.set(layout)\n    this.layout.markAsClean()\n  }\n\n  componentDidMount = () => {\n    this.updateSheet(this.props)\n  }\n  componentWillReceiveProps = props => {\n    if (props.slug !== this.props.slug) {\n      this.character = CharacterModel.create(props.data)\n      this.layout = LayoutModel.create(props.layout)\n      this.setState({\n        saved: pluck(props, UPDATABLE_FIELDS),\n        title: props.title || new URLSearchParams(window.location.search).get('title') || '',\n      })\n    }\n  }\n\n  handleDelete = async () => {\n    if (await confirm('Are you sure you want to permanently delete this sheet?')) {\n      const { slug } = this.context.router.query\n      const response = await fetch(`/api/sheet/${slug}`, { method: 'DELETE' })\n      if (response.status === 204) {\n        this.context.router.back()\n      }\n    }\n  }\n  handleReset = () => {\n    this.character.reset()\n    this.layout.reset()\n    this.setState(this.state.saved)\n  }\n  handleSave = async () => {\n    const { slug } = this.context.router.query\n    const response = await fetch(`/api/sheet/${slug}`, {\n      body: JSON.stringify({\n        data: this.character.toJSON(),\n        layout: this.layout.toJSON(),\n        title: this.state.title,\n      }),\n      headers: { 'Content-Type': 'application/json' },\n      method: 'POST',\n    })\n    const json = await response.json()\n    if (response.status === 200) {\n      this.updateSheet(json)\n      return this.setState({\n        ...pluck(json, STATE_FIELDS),\n        saved: pluck(json, UPDATABLE_FIELDS),\n      })\n    }\n\n    return this.setState(json)\n  }\n  handleSheetChange = () => this.forceUpdate()\n  handleTitleChange = title => this.setState({ title })\n\n  render = () => {\n    const { slug } = this.props\n    const { isEditable, isOwner, title } = this.state\n    // const { isOwner, title } = this.state\n    // const isEditable = false\n\n    return (\n      <div className=\"sheet page\">\n        <div className=\"title-bar\">\n          <Editable\n            className=\"title\"\n            onChange={this.handleTitleChange}\n            readOnly={!isEditable}\n            value={title}\n          />\n          {isEditable && this.isDirty && (\n            <button className=\"save safe\" onClick={this.handleSave}>Save</button>\n          )}\n          {isEditable && this.isDirty && (\n            <button className=\"save safe\" onClick={this.handleReset}>Reset</button>\n          )}\n          {isOwner && (\n            <button className=\"delete danger\" onClick={this.handleDelete}>Delete</button>\n          )}\n        </div>\n        <Scrollbars\n          autoHide universal\n          className={`sheet-container ${isEditable ? 'is-editable' : 'readOnly'}`}\n        >\n          <SfSheet\n            key={slug} readOnly={!isEditable}\n            character={this.character} layout={this.layout}\n            onChange={this.handleSheetChange}\n          />\n        </Scrollbars>\n      </div>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAWA;AACA;AACA;;;AAGA;AACA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AAAA;AACA;AAJA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAPA;AACA;AAHA;AAEA;AAFA;AAAA;AACA;AADA;AAWA;AACA;AAZA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AAdA;AAgBA;AAFA;AACA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AACA;AAFA;AAKA;AAAA;AACA;AAAA;AACA;AAHA;AAQA;AACA;;;;;;AAzGA;AACA;AAIA;;;;AA/BA;AACA;AADA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AACA;AAHA;;;;;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AACA;AAHA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAIA;AAJA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;A","sourceRoot":""}