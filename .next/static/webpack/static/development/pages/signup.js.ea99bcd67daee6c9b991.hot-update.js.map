{"version":3,"file":"static/webpack/static/development/pages/signup.js.ea99bcd67daee6c9b991.hot-update.js","sources":["webpack:///./pages/signup.js"],"sourcesContent":["import React, { Component } from 'react'\nimport Application from '@/contexts/Application'\nimport './signup.scss'\n\nconst EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\nconst PASSWORD_REGEX = /^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/\n\nexport default class SignupPage extends Component {\n  static contextType = Application\n\n  state = {\n    valid: false,\n  }\n\n  email = React.createRef()\n  name = React.createRef()\n  password = React.createRef()\n  passwordConfirm = React.createRef()\n  username = React.createRef()\n\n  componentDidMount = () => {\n    this.name.current.focus()\n  }\n\n  handleEmail = ({ target }) => {\n    const { value } = target\n    if (value.match(EMAIL_REGEX)) {\n      target.classList.remove('invalid')\n    } else {\n      target.classList.add('invalid')\n    }\n    this.handleValidated()\n  }\n  handlePassword = ({ target }) => {\n    const { value } = target\n    if (value.match(PASSWORD_REGEX)) {\n      target.classList.remove('invalid')\n    } else {\n      target.classList.add('invalid')\n    }\n    this.handleValidated()\n  }\n  handlePasswordConfirm = ({ target }) => {\n    if (target.value === this.password.current.value) {\n      target.classList.remove('invalid')\n    } else {\n      target.classList.add('invalid')\n    }\n    this.handleValidated()\n  }\n  handleUsername = event => {\n    // eslint-disable-next-line no-param-reassign\n    event.target.value = event.target.value\n      .toLowerCase()\n      .replace(/[^a-z0-9-_]+/g, '')\n\n    this.handleValidated()\n  }\n  handleValidated = () => {\n    let valid = true;\n\n    ['email', 'password', 'passwordConfirm', 'username'].forEach(key => {\n      const el = this[key].current\n      if (!el.value || el.matches(':invalid, .invalid')) {\n        valid = false\n      }\n    })\n\n    this.setState({ valid })\n  }\n\n  handleKeyPress = event => {\n    switch (event.key) {\n      case 'Enter':\n        this.handleSubmit(); break\n      case 'Escape':\n        this.context.router.back(); break\n      default:\n    }\n  }\n  handleSubmit = async () => {\n    if (!this.state.valid) { return }\n\n    const email = this.email.current.value\n    const name = this.name.current.value\n    const password = this.password.current.value\n    const username = this.username.current.value\n\n    const response = await fetch('/api/user', {\n      body: JSON.stringify({ email, name, password, username }),\n      headers: { 'Content-Type': 'application/json' },\n      method: 'PUT',\n    })\n    const json = await response.json()\n\n    if (response.status === 200) {\n      this.context.router.push(`/user?username=${username}`, `/user/${username}`)\n    } else {\n      this.setState({ message: '', ...json })\n    }\n  }\n\n  /* eslint-disable no-useless-escape */\n  render = () => (\n    <div className=\"signup page\">\n      <div className=\"container\">\n        <h3>Sign Up</h3>\n        <input\n          onChange={this.handleValidated}\n          onKeyDown={this.handleKeyPress}\n          placeholder=\"Name (optional)\"\n          ref={this.name}\n          type=\"text\"\n        />\n\n        <input\n          onChange={this.handleUsername}\n          onKeyDown={this.handleKeyPress}\n          pattern=\"[a-zA-Z0-9_-]{4,}\"\n          placeholder=\"Username\"\n          ref={this.username}\n          type=\"text\"\n        />\n        <span className=\"validation-message\">\n          Length: 4+, letters, numbers, _ & -\n        </span>\n\n        <input\n          onChange={this.handleEmail}\n          onKeyDown={this.handleKeyPress}\n          placeholder=\"Email Address\"\n          ref={this.email}\n          type=\"email\"\n        />\n        <span className=\"validation-message\">\n          Must be a valid e-mail address\n        </span>\n\n        <input\n          onChange={this.handlePassword}\n          onKeyDown={this.handleKeyPress}\n          placeholder=\"Password\"\n          ref={this.password}\n          type=\"password\"\n        />\n        <span className=\"validation-message\">\n          At least 8 characters; must include one a-z, one A-Z, one 0-9 and 1 special character\n        </span>\n        <input\n          onChange={this.handlePasswordConfirm}\n          onKeyDown={this.handleKeyPress}\n          placeholder=\"Confirm Password\"\n          ref={this.passwordConfirm}\n          type=\"password\"\n        />\n        <span className=\"validation-message\">\n          Must match password field\n        </span>\n\n        <div className=\"buttons\">\n          {this.state.valid && (\n            <button className=\"safe\" onClick={this.handleSubmit}>\n              Submit\n            </button>\n          )}\n        </div>\n\n        <span>{this.state.message}</span>\n      </div>\n    </div>\n  )\n  /* eslint-enable no-useless-escape */\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAGA;AACA;AADA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AACA;AADA;AACA;AAAA;AALA;AAOA;AACA;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAGA;AACA;AACA;AACA;AANA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAHA;AACA;AATA;AAQA;AARA;AAAA;AACA;AADA;AAaA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AA1DA;AACA;;;AAmEA;AACA;AACA;;AAtKA;AACA;AADA;AACA;;;;;A","sourceRoot":""}