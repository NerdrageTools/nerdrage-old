{"version":3,"file":"static/webpack/static/development/pages/_app.js.d9f3bea231ef72f64e7e.hot-update.js","sources":["webpack:///./components/Navigation/Navigation.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { Scrollbars } from 'react-custom-scrollbars'\nimport Sortable from 'sortablejs'\nimport ArticleLink from '@/components/ArticleLink'\nimport Application from '@/contexts/Application'\nimport noop from '@/utilities/noop'\nimport pluck from '@/utilities/pluck'\nimport './Navigation.scss'\n\nexport default class Navigation extends Component {\n  static contextType = Application\n  static defaultProps = {\n    items: [],\n    onItemClick: noop,\n    wrapperRef: noop,\n  }\n\n  campaignNav = React.createRef()\n\n  componentDidMount() {\n    const ul = this.campaignNav.current.querySelector('ul')\n\n    this.sortable = Sortable.create(ul, {\n      // disabled: !this.context.campaign.isEditor,\n      dragClass: 'dragging',\n      draggable: 'li',\n      onEnd: () => {\n        console.log([...ul.querySelectorAll('li')])\n      },\n    })\n  }\n\n  renderList = (list = [], listTitle = '', type = 'article') => (\n    Boolean(list.length) && <>\n      <b>{listTitle}</b>\n      <ul>\n        {list.filter(item => item.campaign.domain === this.context.campaign.domain)\n          .map(({ campaign = {}, slug, title }, index) => {\n            const { domain = '', title: cTitle = '' } = campaign\n            let text = title\n            if (type !== 'campaign' && domain && domain !== this.context.domain) {\n              text += ` (${cTitle || domain})`\n            }\n\n            return (\n              <li key={index} data-index={index}>\n                <ArticleLink\n                  {...{ campaign, slug, type }}\n                  active={this.context.domain === domain && this.context.router.asPath === `/${type}/${slug}`}\n                  onClick={this.props.onItemClick}\n                >\n                  {text}\n                </ArticleLink>\n              </li>\n            )\n          })}\n      </ul>\n    </>\n  )\n\n  render = () => {\n    const { campaign, user = {} } = this.context\n    const { favorites = [], sheets = [] } = user\n\n    if (!campaign) return null\n\n    const navigation = campaign.navigation.map(link => ({\n      ...link,\n      campaign: pluck(campaign, '_id', 'domain', 'title'),\n    }))\n\n    return (\n      <Scrollbars className=\"navigation\" autoHide universal>\n        <div className=\"content\" ref={this.props.wrapperRef}>\n          <div className=\"campaign-nav\" ref={this.campaignNav}>\n            {this.renderList(navigation, campaign.title)}\n          </div>\n          {user && <>\n            {this.renderList(favorites, 'My Favorites')}\n            {this.renderList(sheets, 'My Sheets', 'sheet')}\n          </>}\n        </div>\n      </Scrollbars>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAQA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AASA;AAvBA;AACA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAEA;AAFA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAUA;AACA;;;;;;AAlEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;;;;AArBA;AACA;AADA;AACA;AADA;AAGA;AACA;AACA;AAHA;AACA;;;;;A","sourceRoot":""}