{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport IconOff from '~/icons/favorite-off.svg';\nimport IconOn from '~/icons/favorite-on.svg';\nimport { noop } from '~/utilities/noop';\nimport './Toggle.scss';\nexport function Toggle(_ref) {\n  var _ref$className = _ref.className,\n      className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$offIcon = _ref.offIcon,\n      offIcon = _ref$offIcon === void 0 ? IconOff : _ref$offIcon,\n      _ref$offProps = _ref.offProps,\n      offProps = _ref$offProps === void 0 ? {} : _ref$offProps,\n      _ref$onIcon = _ref.onIcon,\n      onIcon = _ref$onIcon === void 0 ? IconOn : _ref$onIcon,\n      _ref$onProps = _ref.onProps,\n      onProps = _ref$onProps === void 0 ? {} : _ref$onProps,\n      _ref$onToggle = _ref.onToggle,\n      onToggle = _ref$onToggle === void 0 ? noop : _ref$onToggle,\n      _ref$readOnly = _ref.readOnly,\n      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? false : _ref$value,\n      props = _objectWithoutProperties(_ref, [\"className\", \"offIcon\", \"offProps\", \"onIcon\", \"onProps\", \"onToggle\", \"readOnly\", \"value\"]);\n\n  var Icon = value ? onIcon : offIcon;\n  return /*#__PURE__*/_jsx(Icon, _objectSpread(_objectSpread({\n    className: \"toggle \".concat(value ? 'on' : 'off', \" \").concat(readOnly ? 'readonly' : '', \" \").concat(className),\n    onClick: readOnly ? noop : onToggle\n  }, props), value ? onProps : offProps));\n}","map":null,"metadata":{},"sourceType":"module"}