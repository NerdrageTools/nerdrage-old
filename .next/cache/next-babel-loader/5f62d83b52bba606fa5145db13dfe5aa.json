{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { CustomPicker, GithubPicker } from 'react-color';\nimport './ColorPicker.scss';\nimport { noop } from '~/utilities/noop';\nvar defaultColors = ['#000000', '#FFFFFF', '#A6808C', '#D6CFCB', '#6E0E0A', '#60594D', '#006B76', '#042A2B', '#124E78', '#5EB1BF'];\n\nfunction ColorPicker(_ref) {\n  var _ref$className = _ref.className,\n      className = _ref$className === void 0 ? '' : _ref$className,\n      _ref$colors = _ref.colors,\n      colors = _ref$colors === void 0 ? defaultColors : _ref$colors,\n      _ref$hex = _ref.hex,\n      hex = _ref$hex === void 0 ? defaultColors[0] : _ref$hex,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? noop : _ref$onChange,\n      _ref$popover = _ref.popover,\n      popover = _ref$popover === void 0 ? true : _ref$popover,\n      _ref$readOnly = _ref.readOnly,\n      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,\n      _ref$text = _ref.text,\n      text = _ref$text === void 0 ? '' : _ref$text,\n      _ref$textColor = _ref.textColor,\n      textColor = _ref$textColor === void 0 ? 'inherit' : _ref$textColor,\n      _ref$triangle = _ref.triangle,\n      triangle = _ref$triangle === void 0 ? 'top-right' : _ref$triangle,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 'auto' : _ref$width;\n  var wrapper = useRef();\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  useEffect(function () {\n    var handleClickOutside = function handleClickOutside(_ref2) {\n      var target = _ref2.target;\n      if (!wrapper.current.contains(target)) setOpen(false);\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return function () {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [true]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"color-picker input \".concat(className, \" \").concat(readOnly ? 'readonly' : ''),\n    ref: wrapper,\n    children: [/*#__PURE__*/_jsx(\"button\", {\n      className: \"swatch\",\n      onClick: function onClick() {\n        return setOpen(!open);\n      },\n      style: {\n        background: hex,\n        color: textColor\n      },\n      disabled: readOnly,\n      children: text\n    }), open && /*#__PURE__*/_jsx(GithubPicker, _objectSpread({}, {\n      colors: colors,\n      hex: hex,\n      onChange: onChange,\n      popover: popover,\n      triangle: triangle,\n      width: width\n    }))]\n  });\n}\n\nexport default CustomPicker(ColorPicker);","map":null,"metadata":{},"sourceType":"module"}