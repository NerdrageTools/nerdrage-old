{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { CustomPicker, GithubPicker } from 'react-color';\nimport './ColorPicker.scss';\nimport { noop } from '~/utilities/noop';\nconst defaultColors = ['#000000', '#FFFFFF', '#A6808C', '#D6CFCB', '#6E0E0A', '#60594D', '#006B76', '#042A2B', '#124E78', '#5EB1BF'];\n\nfunction ColorPicker({\n  className = '',\n  colors = defaultColors,\n  hex = defaultColors[0],\n  onChange = noop,\n  popover = true,\n  readOnly = false,\n  text = '',\n  textColor = 'inherit',\n  triangle = 'top-right',\n  width = 'auto'\n}) {\n  const wrapper = useRef();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  useEffect(() => {\n    const handleClickOutside = ({\n      target\n    }) => {\n      if (!wrapper.current.contains(target)) setOpen(false);\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [true]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: `color-picker input ${className} ${readOnly ? 'readonly' : ''}`,\n    ref: wrapper,\n    children: [/*#__PURE__*/_jsx(\"button\", {\n      className: \"swatch\",\n      onClick: () => setOpen(!open),\n      style: {\n        background: hex,\n        color: textColor\n      },\n      disabled: readOnly,\n      children: text\n    }), open && /*#__PURE__*/_jsx(GithubPicker, _objectSpread({}, {\n      colors,\n      hex,\n      onChange,\n      popover,\n      triangle,\n      width\n    }))]\n  });\n}\n\nexport default CustomPicker(ColorPicker);","map":null,"metadata":{},"sourceType":"module"}