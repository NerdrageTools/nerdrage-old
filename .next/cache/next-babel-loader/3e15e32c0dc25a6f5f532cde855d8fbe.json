{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { Editable } from '~/components/Editable/Editable';\nimport { Link } from '~/components/Link/Link';\nimport Participants from '~/components/Participants/Participants';\nimport SheetList from '~/components/SheetList/SheetList';\nimport Sources from '~/components/Sources/Sources';\nimport ThemeEditor from '~/components/ThemeEditor/ThemeEditor';\nimport { Toggle } from '~/components/Toggle/Toggle';\nimport { Application } from '~/contexts/Application';\nimport PublicIcon from '~/icons/public.svg';\nimport SecretIcon from '~/icons/secret.svg';\nimport ErrorPage from '~/pages/_error';\nimport { pluck } from '~/utilities/pluck';\nimport './campaign.scss';\nconst EDITABLE_FIELDS = ['title'];\nconst STATE_FIELDS = [...EDITABLE_FIELDS, 'isEditor', 'isOwner', 'isPlayer'];\nexport default class CampaignPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", _objectSpread(_objectSpread({}, pluck(this.context.campaign, STATE_FIELDS)), {}, {\n      savingParticipants: false\n    }));\n\n    _defineProperty(this, \"handleParticipantsSave\", ({\n      editors,\n      owners,\n      players\n    }) => {\n      this.setState({\n        savingParticipants: true\n      });\n      const update = {\n        editors: editors.map(user => user._id),\n        owners: owners.map(user => user._id),\n        players: players.map(user => user._id)\n      };\n      this.context.updateCampaign(update, () => {\n        this.setState({\n          savingParticipants: false\n        });\n      });\n    });\n\n    _defineProperty(this, \"handleReset\", () => this.setState(pluck(this.context.campaign, STATE_FIELDS)));\n\n    _defineProperty(this, \"handleSave\", () => this.context.updateCampaign(this.state));\n\n    _defineProperty(this, \"handleSourcesChange\", sources => {\n      this.context.updateCampaign({\n        sources: sources.map(s => s._id)\n      });\n    });\n\n    _defineProperty(this, \"handleTitleChange\", title => this.setState({\n      title\n    }));\n\n    _defineProperty(this, \"handleToggleSecret\", () => {\n      const {\n        secret\n      } = this.context.campaign;\n      this.context.updateCampaign({\n        secret: !secret\n      });\n    });\n\n    _defineProperty(this, \"renderUserList\", list => /*#__PURE__*/_jsx(\"ul\", {\n      className: \"user-list\",\n      children: list.map(({\n        _id,\n        name,\n        username\n      }) => /*#__PURE__*/_jsx(\"li\", {\n        children: /*#__PURE__*/_jsx(Link, {\n          type: \"user\",\n          slug: username,\n          children: name || username\n        })\n      }, _id))\n    }));\n\n    _defineProperty(this, \"render\", () => {\n      const {\n        campaign\n      } = this.context;\n\n      if (!campaign._id) {\n        return /*#__PURE__*/_jsx(ErrorPage, {\n          statusCode: 404,\n          message: campaign.message\n        });\n      }\n\n      const {\n        editors,\n        isEditor,\n        isOwner,\n        isParticipant,\n        owners,\n        players,\n        secret,\n        sources\n      } = campaign;\n      const {\n        savingParticipants,\n        title\n      } = this.state;\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: \"campaign page\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"title-bar\",\n          children: [/*#__PURE__*/_jsx(Editable, {\n            className: \"title\",\n            onChange: this.handleTitleChange,\n            placeholder: \"Campaign Title\",\n            readOnly: campaign.isEditable,\n            value: title\n          }), /*#__PURE__*/_jsx(Toggle, {\n            className: \"secret\",\n            offIcon: PublicIcon,\n            onIcon: SecretIcon,\n            onToggle: this.handleToggleSecret,\n            readOnly: !isOwner,\n            value: secret\n          }), this.isDirty && isOwner && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(\"button\", {\n              className: \"safe\",\n              onClick: this.handleSave,\n              children: \"Save\"\n            }), /*#__PURE__*/_jsx(\"button\", {\n              className: \"safe\",\n              onClick: this.handleReset,\n              children: \"Reset\"\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(Scrollbars, {\n          className: \"contents scrollbars\",\n          universal: true,\n          autoHide: true,\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"left column\",\n            children: [/*#__PURE__*/_jsx(Participants, _objectSpread(_objectSpread({\n              className: \"lightbox\"\n            }, {\n              editors,\n              owners,\n              players\n            }), {}, {\n              onSave: this.handleParticipantsSave,\n              saving: savingParticipants,\n              readOnly: !isEditor\n            })), isParticipant && /*#__PURE__*/_jsx(SheetList, {\n              className: \"lightbox\"\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"right column\",\n            children: [/*#__PURE__*/_jsx(Sources, {\n              className: \"lightbox\",\n              onSave: this.handleSourcesChange,\n              placeholder: \"Add Source Campaign...\",\n              readOnly: !isEditor,\n              sources: sources\n            }), /*#__PURE__*/_jsx(ThemeEditor, {\n              className: \"lightbox\",\n              readOnly: !isEditor\n            })]\n          })]\n        })]\n      });\n    });\n  }\n\n  get isDirty() {\n    const {\n      campaign\n    } = this.context;\n    const fromContext = JSON.stringify(pluck(campaign, EDITABLE_FIELDS));\n    const fromState = JSON.stringify(pluck(this.state, EDITABLE_FIELDS));\n    return fromContext !== fromState;\n  }\n\n}\n\n_defineProperty(CampaignPage, \"contextType\", Application);","map":null,"metadata":{},"sourceType":"module"}