{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @ts-nocheck\nimport fetch from 'isomorphic-unfetch';\nimport dynamic from 'next/dynamic';\nimport React, { Component } from 'react';\nimport JsxParser from 'react-jsx-parser';\nimport { Alert } from '~/components/Alert/Alert';\nimport { Editable } from '~/components/Editable/Editable';\nimport { Link } from '~/components/Link/Link';\nimport { Links } from '~/components/Links/Links';\nimport { TabSet } from '~/components/TabSet/TabSet';\nimport { TagBar } from '~/components/TagBar/TagBar';\nimport { Toggle } from '~/components/Toggle/Toggle';\nimport { Warning } from '~/components/Warning/Warning';\nimport { Application } from '~/contexts/Application';\nimport EditIcon from '~/icons/edit.svg';\nimport FavoriteOffIcon from '~/icons/favorite-off.svg';\nimport FavoriteOnIcon from '~/icons/favorite-on.svg';\nimport HtmlIcon from '~/icons/html.svg';\nimport NavigationIcon from '~/icons/Navigation';\nimport PublicIcon from '~/icons/public.svg';\nimport ReadIcon from '~/icons/read.svg';\nimport SecretIcon from '~/icons/secret.svg';\nimport SettingsIcon from '~/icons/settings.svg';\nimport TemplateIcon from '~/icons/template.svg';\nimport { confirm } from '~/utilities/confirm';\nimport { pluck } from '~/utilities/pluck';\nimport { URI } from '~/utilities/URI';\nconst HtmlEditor = false // // @ts-expect-error - ts does not understand next/dynamic()\n? dynamic(() => import('../components/HtmlEditor/HtmlEditor').then(m => m.HtmlEditor), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../components/HtmlEditor/HtmlEditor')],\n    modules: ['../components/HtmlEditor/HtmlEditor']\n  }\n}) : () => /*#__PURE__*/_jsx(\"div\", {});\nconst WysiwygEditor = false // // @ts-expect-error - ts does not understand next/dynamic()\n? dynamic(() => import('../components/WysiwygEditor/WysiwygEditor').then(m => m.WysiwygEditor), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../components/WysiwygEditor/WysiwygEditor')],\n    modules: ['../components/WysiwygEditor/WysiwygEditor']\n  }\n}) : () => /*#__PURE__*/_jsx(\"div\", {});\nconst STATE_FIELDS = ['_id', 'aliases', 'html', 'isOwner', 'isEditable', 'secret', 'slug', 'tags', 'template', 'title'];\nexport default class Article extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", _objectSpread(_objectSpread({\n      activeTab: 'read',\n      editMode: false\n    }, pluck(this.props, STATE_FIELDS)), {}, {\n      saved: this.props._id ? pluck(this.props, STATE_FIELDS) : {\n        title: this.props.title || this.context.router.query.title\n      },\n      title: this.props.title || this.context.router.query.title\n    }));\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const {\n        slug\n      } = this.props;\n      const {\n        router\n      } = this.context;\n\n      if (slug && router.query.slug !== slug) {\n        this.setState({\n          redirectedFrom: router.query.slug\n        });\n        router.push(`/article?slug=${slug}`, `/article/${slug}`, {\n          shallow: true\n        });\n      } else {\n        this.setState({\n          redirectedFrom: undefined\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleAliasesChange\", aliases => this.setState({\n      aliases\n    }));\n\n    _defineProperty(this, \"handleDelete\", async () => {\n      if (!(await confirm('Are you sure you want to permanently delete this article?'))) return;\n      await fetch(`/api/article/${this.props.slug}`, {\n        method: 'DELETE'\n      });\n      const article = await fetch(`/api/article/${this.props.slug}`);\n\n      const json = _objectSpread(_objectSpread({}, pluck(await article.json(), STATE_FIELDS)), {}, {\n        _id: null,\n        title: this.context.router.query.title || ''\n      });\n\n      this.setState(_objectSpread(_objectSpread({}, json), {}, {\n        activeTab: 'read',\n        saved: json\n      }));\n      this.context.updateUser();\n    });\n\n    _defineProperty(this, \"handleHtmlChange\", html => this.setState({\n      html\n    }));\n\n    _defineProperty(this, \"handleReset\", () => this.setState(_objectSpread({\n      activeTab: 'read'\n    }, this.state.saved)));\n\n    _defineProperty(this, \"handleSave\", async () => {\n      const saved = await fetch(`/api/article/${this.props.slug}`, {\n        body: JSON.stringify(pluck(this.state, STATE_FIELDS)),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST'\n      }).then(r => r.json());\n      this.setState(_objectSpread(_objectSpread({}, saved), {}, {\n        saved\n      }));\n      this.context.updateUser();\n    });\n\n    _defineProperty(this, \"handleTabClicked\", tab => {\n      if (tab !== this.state.activeTab) {\n        this.setState({\n          activeTab: tab\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleTagsChange\", tags => this.setState({\n      tags\n    }));\n\n    _defineProperty(this, \"handleTitleChange\", title => this.setState({\n      title\n    }));\n\n    _defineProperty(this, \"handleToggleEditMode\", () => this.setState({\n      activeTab: this.state.editMode ? 'read' : 'edit',\n      editMode: !this.state.editMode\n    }));\n\n    _defineProperty(this, \"handleToggleFavorite\", async () => {\n      const updated = await fetch(`/api/user/my/favorites/${this.props.slug}`, {\n        method: 'POST'\n      }).then(r => r.json());\n      this.context.setUser(updated);\n    });\n\n    _defineProperty(this, \"handleToggleNavigation\", async () => {\n      const {\n        slug,\n        title\n      } = this.props;\n      const {\n        campaign\n      } = this.context;\n\n      if (!campaign) {\n        return;\n      }\n\n      let navigation = campaign.navigation || [];\n\n      if (this.isNavLink) {\n        navigation = navigation.filter(n => n.slug !== slug);\n      } else {\n        navigation.push({\n          slug,\n          title\n        });\n      }\n\n      this.context.updateCampaign({\n        navigation\n      });\n    });\n\n    _defineProperty(this, \"handleToggleSecret\", async () => {\n      this.handleUpdate({\n        secret: !this.state.secret\n      });\n    });\n\n    _defineProperty(this, \"handleToggleTemplate\", async () => {\n      this.handleUpdate({\n        template: !this.state.template\n      });\n    });\n\n    _defineProperty(this, \"handleUpdate\", async payload => {\n      const keys = Object.keys(payload);\n      const response = await fetch(`/api/article/${this.props.slug}`, {\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST'\n      });\n      const updated = pluck(await response.json(), ...keys);\n\n      if (response.status === 200) {\n        this.setState(_objectSpread(_objectSpread({}, updated), {}, {\n          saved: _objectSpread(_objectSpread({}, this.state.saved), updated)\n        }));\n      }\n    });\n\n    _defineProperty(this, \"renderReadOnlyContent\", () => {\n      const jsx = (this.state.html || this.props.html || '').trim();\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(JsxParser, {\n          allowUnknownElements: true,\n          autoCloseVoidElements: true,\n          components: {\n            a: Link,\n            Warning\n          },\n          jsx: jsx !== null && jsx !== void 0 ? jsx : ''\n        }), /*#__PURE__*/_jsx(Links, {\n          pages: this.props.childArticles\n        })]\n      });\n    });\n\n    _defineProperty(this, \"renderSettingsTab\", () => /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"fieldset\", {\n        children: [/*#__PURE__*/_jsx(\"legend\", {\n          children: \"Aliases\"\n        }), /*#__PURE__*/_jsx(TagBar, {\n          banned: [this.state.slug],\n          className: \"aliases\",\n          inputSettings: {\n            placeholder: 'add alias'\n          },\n          onChange: this.handleAliasesChange,\n          readOnly: !this.props.isEditable,\n          tags: this.state.aliases\n        })]\n      }), this.props.isEditable && /*#__PURE__*/_jsxs(\"fieldset\", {\n        className: \"danger\",\n        children: [/*#__PURE__*/_jsx(\"legend\", {\n          className: \"danger\",\n          children: \"Danger\"\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsx(\"button\", {\n            className: \"danger\",\n            onClick: this.handleDelete,\n            children: \"Delete\"\n          }), /*#__PURE__*/_jsx(\"span\", {\n            children: \"Warning: This cannot be undone.\"\n          })]\n        })]\n      })]\n    }));\n\n    _defineProperty(this, \"render\", () => {\n      const {\n        _id,\n        activeTab,\n        aliases,\n        html,\n        isEditable,\n        isOwner,\n        message,\n        redirectedFrom,\n        secret,\n        slug,\n        tags,\n        template = false,\n        title = ''\n      } = this.state;\n      const {\n        campaign: source,\n        childArticles,\n        httpStatusCode\n      } = this.props;\n      const {\n        campaign = {},\n        user: {\n          favorites = []\n        }\n      } = this.context;\n      const isFavorite = favorites.find(f => f.subdomain === campaign.subdomain && f.slug === slug);\n      const readOnly = !isEditable || !this.state.editMode;\n      const classNames = ['article page', childArticles.length ? '' : 'no-child-articles'].filter(Boolean).join(' ');\n\n      if (httpStatusCode !== 200) {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          className: classNames,\n          children: [/*#__PURE__*/_jsx(Alert, {\n            children: message\n          }), this.renderReadOnlyContent()]\n        });\n      }\n\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: classNames,\n        children: [message && /*#__PURE__*/_jsx(Alert, {\n          children: message\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"title-bar\",\n          children: [/*#__PURE__*/_jsx(Editable, {\n            className: `title ${title.trim() ? '' : 'default'}`,\n            onChange: this.handleTitleChange,\n            placeholder: slug,\n            readOnly: readOnly,\n            value: readOnly ? this.state.saved.title : title\n          }), redirectedFrom && /*#__PURE__*/_jsxs(\"div\", {\n            className: \"redirected-from\",\n            children: [\"Redirected From:\", /*#__PURE__*/_jsx(\"b\", {\n              children: redirectedFrom\n            })]\n          }), _id && isOwner && /*#__PURE__*/_jsx(Toggle, {\n            className: \"secret\",\n            offIcon: PublicIcon,\n            onIcon: SecretIcon,\n            onToggle: this.handleToggleSecret,\n            value: secret\n          }), _id && campaign.isEditor && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Toggle, {\n              className: \"template\",\n              offIcon: TemplateIcon,\n              onIcon: TemplateIcon,\n              onToggle: this.handleToggleTemplate,\n              value: template\n            }), /*#__PURE__*/_jsx(Toggle, {\n              className: \"in-navigation\",\n              offIcon: NavigationIcon,\n              offProps: {\n                title: 'Not Added to Site Navigation'\n              },\n              onIcon: NavigationIcon,\n              onProps: {\n                title: 'Added to Site Navigation'\n              },\n              onToggle: this.handleToggleNavigation,\n              value: this.isNavLink\n            })]\n          }), campaign.isEditor && /*#__PURE__*/_jsx(Toggle, {\n            className: \"edit-mode\",\n            offIcon: EditIcon,\n            onIcon: EditIcon,\n            onToggle: this.handleToggleEditMode,\n            value: this.state.editMode\n          }), _id && /*#__PURE__*/_jsx(Toggle, {\n            className: \"favorite\",\n            offIcon: FavoriteOffIcon,\n            onIcon: FavoriteOnIcon,\n            onToggle: this.handleToggleFavorite,\n            value: isFavorite\n          }), this.isDirty && campaign.isEditor && /*#__PURE__*/_jsx(\"button\", {\n            className: \"safe\",\n            onClick: this.handleSave,\n            children: \"Save\"\n          }), _id && this.isDirty && campaign.isEditor && /*#__PURE__*/_jsx(\"button\", {\n            className: \"safe\",\n            onClick: this.handleReset,\n            children: \"Reset\"\n          })]\n        }), /*#__PURE__*/_jsx(TabSet, {\n          activeTabId: activeTab,\n          buttons: /*#__PURE__*/_jsx(_Fragment, {\n            children: source.subdomain && source.subdomain !== campaign.subdomain && /*#__PURE__*/_jsxs(\"div\", {\n              className: \"source\",\n              children: [\"Source:\", ' ', /*#__PURE__*/_jsx(Link, {\n                slug: slug,\n                subdomain: source.subdomain,\n                children: source.title\n              })]\n            })\n          }),\n          onTabClicked: this.handleTabClicked,\n          showTabs: !readOnly,\n          tabs: [{\n            contents: this.renderReadOnlyContent(),\n            id: 'read',\n            tab: /*#__PURE__*/_jsx(ReadIcon, {})\n          }, {\n            contents: /*#__PURE__*/_jsx(WysiwygEditor, {\n              value: html,\n              onChange: this.handleHtmlChange\n            }),\n            id: 'edit',\n            tab: /*#__PURE__*/_jsx(EditIcon, {})\n          }, {\n            contents: /*#__PURE__*/_jsx(HtmlEditor, {\n              onChange: this.handleHtmlChange,\n              value: html\n            }),\n            id: 'html',\n            tab: /*#__PURE__*/_jsx(HtmlIcon, {})\n          }, {\n            contents: this.renderSettingsTab(),\n            id: 'settings',\n            tab: /*#__PURE__*/_jsx(SettingsIcon, {})\n          }].filter(Boolean)\n        }), (tags.length || !readOnly) && /*#__PURE__*/_jsx(TagBar, {\n          asLinks: true,\n          banned: [slug, ...aliases],\n          className: \"tags\",\n          onChange: this.handleTagsChange,\n          readOnly: readOnly,\n          tags: tags\n        })]\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.slug !== state.slug) {\n      const saved = pluck(props, STATE_FIELDS);\n      const title = props.title || new URLSearchParams(window.location.search).get('title') || '';\n      return _objectSpread(_objectSpread({\n        activeTab: 'read',\n        editMode: false\n      }, saved), {}, {\n        saved: _objectSpread(_objectSpread({}, saved), {}, {\n          title\n        }),\n        title\n      });\n    }\n\n    return state;\n  }\n\n  get isDirty() {\n    const fromState = JSON.stringify(pluck(this.state, STATE_FIELDS));\n    const fromSaved = JSON.stringify(pluck(this.state.saved, STATE_FIELDS));\n    return fromState !== fromSaved;\n  }\n\n  get isNavLink() {\n    const {\n      campaign = {}\n    } = this.context;\n    if (!campaign.navigation || !campaign.navigation.length) return false;\n    return Boolean(campaign.navigation.find(n => n.slug === this.props.slug));\n  }\n\n}\n\n_defineProperty(Article, \"styles\", import('./article.scss'));\n\n_defineProperty(Article, \"contextType\", Application);\n\n_defineProperty(Article, \"defaultProps\", {\n  childArticles: [],\n  html: '',\n  httpStatusCode: 200,\n  message: '',\n  title: ''\n});\n\n_defineProperty(Article, \"getInitialProps\", async ({\n  query,\n  req\n}) => {\n  const headers = pluck(req && req.headers, 'cookie');\n  let url = `/api/article/${query.slug}`;\n  if (query.template) url += `?template=${query.template}`;\n  const response = await fetch(URI(req, url), {\n    headers\n  });\n  const json = await response.json();\n  return _objectSpread({\n    httpStatusCode: response.status\n  }, json);\n});","map":null,"metadata":{},"sourceType":"module"}