{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport NextLink from 'next/link';\nimport React, { useContext } from 'react';\nimport { Application } from '~/contexts/Application';\nexport const Link = (_ref) => {\n  let {\n    children,\n    className = '',\n    query = null,\n    slug = '',\n    to,\n    type = 'article'\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"className\", \"query\", \"slug\", \"to\", \"type\"]);\n\n  const context = useContext(Application);\n  const subdomain = props.subdomain || context.subdomain;\n  const contents = children || type;\n  const active = context.router.asPath === `/${type}/${slug}`;\n\n  if (!slug && props.href) {\n    return /*#__PURE__*/_jsx(\"a\", {\n      className: \"external\",\n      href: props.href,\n      target: \"_new\",\n      children: children\n    });\n  }\n\n  const queryString = !query ? '' : `${Object.entries(query).map(([key, value]) => `${key}=${value}`).join('&')}`;\n\n  if (active) {\n    const title = typeof contents === 'string' ? contents : undefined;\n    return /*#__PURE__*/_jsx(\"span\", {\n      className: \"active link\",\n      title: title,\n      children: contents\n    });\n  }\n\n  if (subdomain && (!context.campaign || subdomain !== context.campaign.subdomain)) {\n    let href = `//${subdomain}.${context.rootUrl}/${type}`;\n    if (type !== 'campaign') href += `/${slug}`;\n    return /*#__PURE__*/_jsx(\"a\", _objectSpread(_objectSpread({}, _objectSpread(_objectSpread({}, props), {}, {\n      href,\n      subdomain\n    })), {}, {\n      children: contents\n    }));\n  }\n\n  let as = `/${type}`;\n  let href = `/${type}`;\n\n  if (to) {\n    as = to;\n    href = to;\n  } else if (type !== 'campaign') {\n    if (slug) {\n      as += `/${slug}`;\n      href += `?slug=${slug}`;\n    }\n\n    if (queryString) {\n      as += `?${queryString}`;\n      href += `&${queryString}`;\n    }\n  } else if (queryString) {\n    as += `?${queryString}`;\n    href += `?${queryString}`;\n  }\n\n  return /*#__PURE__*/_jsx(NextLink, _objectSpread(_objectSpread({}, {\n    as,\n    href\n  }), {}, {\n    children: /*#__PURE__*/_jsx(\"a\", _objectSpread(_objectSpread({}, _objectSpread(_objectSpread({}, props), {}, {\n      className,\n      href: as\n    })), {}, {\n      children: contents\n    }))\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}