{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fetch from 'isomorphic-unfetch';\nimport React, { Component } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { CharacterModel, LayoutModel, Sheet as SfSheet } from 'sheetforge';\nimport { Editable } from '~/components/Editable/Editable';\nimport { Toggle } from '~/components/Toggle/Toggle';\nimport { Application } from '~/contexts/Application';\nimport defaultLayout from '~/data/defaultSheetLayout';\nimport PublicIcon from '~/icons/public.svg';\nimport SecretIcon from '~/icons/secret.svg';\nimport TemplateIcon from '~/icons/template.svg';\nimport ErrorPage from '~/pages/_error';\nimport { confirm } from '~/utilities/confirm';\nimport { pluck } from '~/utilities/pluck';\nimport { URI } from '~/utilities/URI';\nimport 'sheetforge/build/sheetforge.css';\nimport './sheet.scss';\nconst STATE_FIELDS = ['_id', 'isEditor', 'isOwner', 'secret', 'slug', 'template'];\nconst UPDATABLE_FIELDS = ['title'];\nexport default class Sheet extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", _objectSpread(_objectSpread({}, pluck(this.props, STATE_FIELDS)), {}, {\n      saved: pluck(this.props, UPDATABLE_FIELDS),\n      title: this.props.title || this.context.router.query.title || 'Unnamed Character'\n    }));\n\n    _defineProperty(this, \"character\", CharacterModel.create({}));\n\n    _defineProperty(this, \"layout\", LayoutModel.create(defaultLayout));\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      this.updateSheet(this.props);\n    });\n\n    _defineProperty(this, \"componentWillReceiveProps\", props => {\n      if (props.slug !== this.props.slug) {\n        this.character = CharacterModel.create(props.data);\n        this.layout = LayoutModel.create(props.layout);\n        this.setState({\n          saved: pluck(props, UPDATABLE_FIELDS),\n          title: props.title || new URLSearchParams(window.location.search).get('title') || ''\n        });\n      }\n    });\n\n    _defineProperty(this, \"updateSheet\", ({\n      data = {},\n      layout = defaultLayout\n    }) => {\n      this.character.set(data);\n      this.character.markAsClean();\n      this.layout.set(layout);\n      this.layout.markAsClean();\n    });\n\n    _defineProperty(this, \"handleDelete\", async () => {\n      if (await confirm('Are you sure you want to permanently delete this sheet?')) {\n        const {\n          slug\n        } = this.context.router.query;\n        const response = await fetch(`/api/sheet/${slug}`, {\n          method: 'DELETE'\n        });\n\n        if (response.status === 204) {\n          this.context.router.back();\n        }\n      }\n    });\n\n    _defineProperty(this, \"handleReset\", () => {\n      this.character.reset();\n      this.layout.reset();\n      this.setState(this.state.saved);\n    });\n\n    _defineProperty(this, \"handleSave\", async payload => {\n      const {\n        slug\n      } = this.context.router.query;\n      const response = await fetch(`/api/sheet/${slug}`, {\n        body: JSON.stringify(payload || {\n          data: this.character.toJSON(),\n          layout: this.layout.toJSON(),\n          title: this.state.title\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST'\n      });\n      const json = await response.json();\n\n      if (response.status === 200) {\n        this.updateSheet(json);\n        return this.setState(_objectSpread(_objectSpread({}, pluck(json, STATE_FIELDS)), {}, {\n          saved: pluck(json, UPDATABLE_FIELDS)\n        }));\n      }\n\n      return this.setState(json);\n    });\n\n    _defineProperty(this, \"handleSheetChange\", () => this.forceUpdate());\n\n    _defineProperty(this, \"handleTitleChange\", title => this.setState({\n      title\n    }));\n\n    _defineProperty(this, \"handleToggleSecret\", () => this.handleSave({\n      secret: !this.state.secret\n    }));\n\n    _defineProperty(this, \"handleToggleTemplate\", () => this.handleSave({\n      template: !this.state.template\n    }));\n\n    _defineProperty(this, \"render\", () => {\n      const {\n        httpStatusCode,\n        message,\n        slug\n      } = this.props;\n      const {\n        _id,\n        isEditor,\n        isOwner,\n        secret,\n        template,\n        title\n      } = this.state;\n\n      if (httpStatusCode !== 200) {\n        return /*#__PURE__*/_jsx(ErrorPage, _objectSpread({}, {\n          httpStatusCode,\n          message\n        }));\n      }\n\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: \"sheet page\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"title-bar\",\n          children: [/*#__PURE__*/_jsx(Editable, {\n            className: \"title\",\n            onChange: this.handleTitleChange,\n            readOnly: !isEditor,\n            value: title\n          }), isEditor && this.isDirty && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(\"button\", {\n              className: \"safe\",\n              onClick: () => this.handleSave(),\n              children: _id ? 'Save' : 'Create'\n            }), _id && /*#__PURE__*/_jsx(\"button\", {\n              className: \"safe\",\n              onClick: this.handleReset,\n              children: \"Reset\"\n            })]\n          }), _id && isEditor && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Toggle, {\n              className: \"secret\",\n              offIcon: PublicIcon,\n              onIcon: SecretIcon,\n              onToggle: this.handleToggleSecret,\n              value: secret\n            }), /*#__PURE__*/_jsx(Toggle, {\n              className: \"template\",\n              value: template,\n              offIcon: TemplateIcon,\n              onIcon: TemplateIcon,\n              onToggle: this.handleToggleTemplate\n            })]\n          }), _id && isOwner && /*#__PURE__*/_jsx(\"button\", {\n            className: \"delete danger\",\n            onClick: this.handleDelete,\n            children: \"Delete\"\n          })]\n        }), /*#__PURE__*/_jsx(Scrollbars, {\n          autoHide: true,\n          universal: true,\n          className: `sheet-container scrollbars ${isEditor ? 'is-editable' : 'readOnly'}`,\n          children: /*#__PURE__*/_jsx(SfSheet, {\n            readOnly: !isEditor,\n            character: this.character,\n            layout: this.layout,\n            onChange: this.handleSheetChange\n          }, slug)\n        })]\n      });\n    });\n  }\n\n  get isDirty() {\n    return this.state.title !== this.state.saved.title || this.character.isDirty || this.layout.isDirty;\n  }\n\n}\n\n_defineProperty(Sheet, \"contextType\", Application);\n\n_defineProperty(Sheet, \"defaultProps\", {\n  children: [],\n  data: {},\n  layout: defaultLayout,\n  slug: '',\n  title: ''\n});\n\n_defineProperty(Sheet, \"getInitialProps\", async ({\n  query,\n  req\n}) => {\n  const headers = pluck(req && req.headers, 'cookie');\n  let url = `/api/sheet/${query.slug}`;\n  if (query.template) url += `?template=${query.template}`;\n  const response = await fetch(URI(req, url), {\n    headers\n  });\n  const json = await response.json();\n  return _objectSpread({\n    httpStatusCode: response.status\n  }, json);\n});","map":null,"metadata":{},"sourceType":"module"}