{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport TagsInput from 'react-tagsinput';\nimport Tag from '~/components/Tag/Tag';\nimport { noop } from '~/utilities/noop';\nimport './TagBar.scss';\n\nconst exclude = (list, exclusions) => list.filter(el => !exclusions.includes(el));\n\nconst areEqual = (array1, array2) => array1.every((el, ix) => el === array2[ix]);\n\nexport class TagBar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleChange\", updated => {\n      const {\n        banned,\n        onChange,\n        sort,\n        tags\n      } = this.props;\n      const cleaned = exclude(updated, banned);\n      if (sort) cleaned.sort();\n      if (!areEqual(cleaned, tags)) onChange(cleaned);\n    });\n\n    _defineProperty(this, \"handleTagRemove\", removed => {\n      const {\n        tags,\n        onChange\n      } = this.props;\n      onChange(tags.filter(tag => tag !== removed));\n    });\n\n    _defineProperty(this, \"handleTextInput\", next => event => {\n      const {\n        value\n      } = event.target;\n\n      if (!value.match(this.props.validationRegex)) {\n        event.preventDefault();\n      } else {\n        next(event);\n      }\n    });\n\n    _defineProperty(this, \"renderInput\", (_ref) => {\n      let {\n        addTag,\n        onChange\n      } = _ref,\n          props = _objectWithoutProperties(_ref, [\"addTag\", \"onChange\"]);\n\n      return !this.props.readOnly ? /*#__PURE__*/_jsx(\"input\", _objectSpread({\n        type: \"text\",\n        onChange: this.handleTextInput(onChange)\n      }, props)) : null;\n    });\n\n    _defineProperty(this, \"renderLayout\", (tags, input) => /*#__PURE__*/_jsxs(Scrollbars, {\n      autoHide: true,\n      className: \"scrollbars\",\n      universal: true,\n      children: [tags, input]\n    }));\n\n    _defineProperty(this, \"renderTag\", ({\n      className,\n      key,\n      tag\n    }) => /*#__PURE__*/_jsx(Tag, {\n      asLink: this.props.asLinks,\n      className: className,\n      onRemove: this.handleTagRemove,\n      removable: !this.props.readOnly,\n      tag: tag\n    }, key));\n  }\n\n  render() {\n    const {\n      className,\n      inputSettings,\n      readOnly,\n      tags,\n      tagSettings\n    } = this.props;\n    const classNames = ['tag-bar', className, readOnly ? 'readOnly' : ''].filter(Boolean).join(' ');\n    return /*#__PURE__*/_jsx(TagsInput, {\n      className: classNames,\n      inputProps: inputSettings,\n      onChange: this.handleChange,\n      onlyUnique: true,\n      readOnly: readOnly,\n      renderLayout: this.renderLayout,\n      renderInput: this.renderInput,\n      renderTag: this.renderTag,\n      tagProps: tagSettings,\n      value: tags\n    });\n  }\n\n}\n\n_defineProperty(TagBar, \"defaultProps\", {\n  asLinks: false,\n  banned: [],\n  className: '',\n  onChange: noop,\n  onRemove: noop,\n  readOnly: false,\n  sort: true,\n  tags: [],\n  validationRegex: /^[a-z0-9-]*$/,\n  // eslint-disable-next-line sort-keys\n  inputSettings: {\n    className: 'tag-bar-input',\n    placeholder: 'add tag'\n  },\n  tagSettings: {\n    className: '',\n    classNameRemove: 'remove'\n  }\n});","map":null,"metadata":{},"sourceType":"module"}