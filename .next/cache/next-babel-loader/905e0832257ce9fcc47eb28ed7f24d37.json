{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport EditableList from '~/components/EditableList/EditableList';\nimport { Link } from '~/components/Link/Link';\nimport UserSearchBox from '~/components/SearchBox/UserSearchBox';\nimport NerdIcon from '~/icons/nerd.svg';\nimport RemoveIcon from '~/icons/remove.svg';\nimport compareBy from '~/utilities/compareBy';\nimport { noop } from '~/utilities/noop';\nimport { pluck } from '~/utilities/pluck';\nimport './Participants.scss';\nconst ORDER = {\n  editor: 2,\n  owner: 1,\n  player: 3,\n  removed: 4\n};\n\nconst addParticipants = (map, users, addition) => {\n  users.forEach(user => {\n    map.set(user._id, _objectSpread(_objectSpread(_objectSpread({}, map.get(user._id) || user), user), addition));\n  });\n};\n\nexport default class Participants extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      edits: [],\n      participants: []\n    });\n\n    _defineProperty(this, \"handleSetEdit\", (user, edit = {}) => {\n      if (!user) return;\n      const {\n        current,\n        edits\n      } = this.state;\n      const exists = current.find(p => p._id === user._id);\n      const currentEdit = edits.find(e => e._id === user._id) || {};\n      const updated = edits.filter(e => e._id !== user._id);\n\n      if (edit.type === 'added' && !exists) {\n        updated.push(_objectSpread(_objectSpread(_objectSpread({}, user), edit), pluck(currentEdit, 'level', 'order')));\n      }\n\n      if (edit.type === 'removed' && exists && currentEdit.type !== 'removed') {\n        updated.push(_objectSpread(_objectSpread(_objectSpread({}, user), edit), pluck(currentEdit, 'level', 'order')));\n      }\n\n      if (edit.type === 'updated') {\n        updated.push(_objectSpread(_objectSpread({}, user), edit));\n      }\n\n      this.setState({\n        edits: updated\n      });\n    });\n\n    _defineProperty(this, \"handleAddUser\", user => {\n      if (!user) return;\n      this.handleSetEdit(user, {\n        level: 'player',\n        order: ORDER.player,\n        type: 'added'\n      });\n    });\n\n    _defineProperty(this, \"handleSetPermission\", (user, level) => {\n      if (!user) return;\n      this.handleSetEdit(user, {\n        level,\n        order: ORDER[level],\n        type: 'updated'\n      });\n    });\n\n    _defineProperty(this, \"handleToggleRemoved\", user => {\n      if (!user) return;\n      this.handleSetEdit(user, {\n        level: 'removed',\n        order: ORDER.removed,\n        type: 'removed'\n      });\n    });\n\n    _defineProperty(this, \"handleSave\", () => {\n      const {\n        participants\n      } = this.state;\n      this.props.onSave({\n        editors: participants.filter(p => p.level === 'editor'),\n        owners: participants.filter(p => p.level === 'owner'),\n        players: participants.filter(p => p.level === 'player')\n      });\n      this.setState({\n        edits: []\n      });\n    });\n\n    _defineProperty(this, \"render\", () => {\n      const {\n        className,\n        readOnly,\n        saving,\n        title\n      } = this.props;\n      const {\n        participants\n      } = this.state;\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: `participants ${className} ${saving ? 'loading' : ''}`,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"title\",\n          children: title\n        }), /*#__PURE__*/_jsx(Scrollbars, {\n          className: \"contents scrollbars\",\n          universal: true,\n          children: /*#__PURE__*/_jsx(\"ul\", {\n            className: \"participant-list\",\n            children: participants.map(user => /*#__PURE__*/_jsxs(\"li\", {\n              className: `participant row ${user.type || ''}`,\n              children: [/*#__PURE__*/_jsx(NerdIcon, {\n                className: \"nerd icon\"\n              }), /*#__PURE__*/_jsxs(Link, {\n                className: \"display\",\n                type: \"user\",\n                slug: user.username,\n                children: [/*#__PURE__*/_jsx(\"span\", {\n                  className: \"name\",\n                  title: user.name,\n                  children: user.name\n                }), /*#__PURE__*/_jsxs(\"span\", {\n                  className: \"username\",\n                  title: user.username,\n                  children: [\"(\", user.username, \")\"]\n                })]\n              }), !readOnly && /*#__PURE__*/_jsxs(_Fragment, {\n                children: [/*#__PURE__*/_jsx(EditableList, {\n                  className: \"role\",\n                  defaultValue: user.level,\n                  onChange: level => this.handleSetPermission(user, level),\n                  options: ['owner', 'editor', 'player']\n                }), /*#__PURE__*/_jsx(RemoveIcon, {\n                  className: \"remove icon\",\n                  onClick: () => this.handleToggleRemoved(user)\n                })]\n              })]\n            }, user._id))\n          })\n        }), !readOnly && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(UserSearchBox, {\n            className: \"add-user\",\n            onSelect: this.handleAddUser\n          }), this.state.edits.length !== 0 && /*#__PURE__*/_jsx(\"button\", {\n            className: \"save safe\",\n            onClick: this.handleSave,\n            children: \"Save\"\n          })]\n        })]\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      editors,\n      owners,\n      players\n    } = props;\n    const {\n      edits\n    } = state;\n    const map = new Map();\n    addParticipants(map, players, {\n      level: 'player',\n      order: ORDER.player\n    });\n    addParticipants(map, editors, {\n      level: 'editor',\n      order: ORDER.editor\n    });\n    addParticipants(map, owners, {\n      level: 'owner',\n      order: ORDER.owner\n    });\n    const current = Array.from(map.values()).sort(compareBy('order'));\n    addParticipants(map, edits);\n    const participants = Array.from(map.values()).sort(compareBy('order'));\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current,\n      participants\n    });\n  }\n\n}\n\n_defineProperty(Participants, \"defaultProps\", {\n  className: '',\n  editors: [],\n  onSave: noop,\n  owners: [],\n  players: [],\n  readOnly: false,\n  saving: false,\n  title: 'Participants'\n});","map":null,"metadata":{},"sourceType":"module"}