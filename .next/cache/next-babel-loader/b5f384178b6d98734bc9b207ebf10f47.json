{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { noop } from '~/utilities/noop';\n\nconst applyProps = ({\n  bodyClasses,\n  css,\n  document\n}) => {\n  if (!document || !document.body || !document.head) {\n    return noop;\n  }\n\n  const bodyTag = document.body;\n  const classNames = bodyClasses.filter(Boolean);\n  classNames.forEach(cn => bodyTag.classList.add(cn));\n  const headTag = document.head;\n  let styleTag = headTag.querySelector('style#injected');\n\n  if (!styleTag) {\n    styleTag = document.createElement('style');\n    styleTag.id = 'injected';\n    headTag.appendChild(styleTag);\n  }\n\n  styleTag.innerHTML = css;\n  return () => classNames.forEach(cn => bodyTag.classList.remove(cn));\n};\n\nexport default function IFrame({\n  bodyClasses = [],\n  className = '',\n  css = '',\n  onLoad = noop,\n  onReady = noop,\n  onUnload = noop,\n  queryString = {},\n  src = '',\n  title = 'IFrame'\n}) {\n  const frameEl = useRef();\n  const handleOnReady = useMemo(() => ({\n    document,\n    window\n  }) => {\n    applyProps({\n      bodyClasses,\n      css,\n      document\n    });\n    onReady({\n      document,\n      window\n    });\n  }, [bodyClasses, css, onReady]);\n  const handleOnLoad = useEffect(function _handleOnLoad() {\n    const document = frameEl.current.contentDocument; // eslint-disable-line no-shadow\n\n    const window = frameEl.current.contentWindow;\n    onLoad({\n      document,\n      window\n    });\n\n    if (window.location.href === 'about:blank') {\n      setTimeout(_handleOnLoad, 50);\n    } else if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => {\n        handleOnReady({\n          document,\n          window\n        });\n      });\n    } else {\n      handleOnReady({\n        document,\n        window\n      });\n    }\n\n    return () => onUnload({\n      document,\n      window\n    });\n  }, [onReady, onUnload]);\n  const url = useMemo(() => {\n    const params = Object.entries(queryString).filter(([, value]) => value !== undefined).reduce((object, [key, value]) => _objectSpread(_objectSpread({}, object), {}, {\n      [key]: value\n    }), {});\n    const qs = new URLSearchParams(params).toString();\n    return src.match(/[?]/) ? `${src}&${qs}` : `${src}?${qs}`;\n  }, [src, queryString]);\n  return /*#__PURE__*/_jsx(\"iframe\", _objectSpread({\n    onLoad: handleOnLoad,\n    ref: frameEl,\n    src: url\n  }, {\n    className,\n    title\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}