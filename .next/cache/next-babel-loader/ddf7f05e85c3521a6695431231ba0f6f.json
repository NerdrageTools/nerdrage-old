{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Downshift from 'downshift';\nimport React, { Component } from 'react';\nimport { Application } from '~/contexts/Application';\nimport LoadingIcon from '~/icons/loading.svg';\nimport SearchIcon from '~/icons/search.svg';\nimport debounce from '~/utilities/debounce';\nimport { noop } from '~/utilities/noop';\nimport objectMatch from '~/utilities/objectMatch';\nimport './SearchBox.scss';\nexport default class SearchBox extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      message: null,\n      options: [],\n      searchTerm: this.props.initialValue\n    });\n\n    _defineProperty(this, \"downshift\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"inputBox\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"debouncedSearch\", debounce(async (searchTerm = '') => {\n      const {\n        limit,\n        url\n      } = this.props;\n\n      if (!url || !searchTerm || searchTerm.length < 3) {\n        this.setState({\n          message: 'Enter at least 3 characters...',\n          options: [],\n          searching: false\n        });\n        return undefined;\n      }\n\n      const searchUrl = url.replace(':searchTerm', searchTerm);\n      const queryString = `limit=${limit}`;\n      const response = await fetch(`${searchUrl}?${queryString}`);\n      const json = await response.json();\n\n      if (response.status === 200 && json.length) {\n        return this.setState({\n          message: '',\n          options: json,\n          searching: false\n        });\n      }\n\n      return this.setState({\n        message: json.message || 'No results found...',\n        options: [],\n        searching: false\n      });\n    }, 500));\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      document.addEventListener('keydown', this.handleHotKeys);\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      document.removeEventListener('keydown', this.handleHotKeys);\n    });\n\n    _defineProperty(this, \"handleFocus\", () => {\n      if (this.props.selectOnFocus) {\n        this.inputBox.current.select();\n      }\n    });\n\n    _defineProperty(this, \"handleHotKeys\", event => {\n      Object.entries(this.props.hotkeys).forEach(([name, keyCombo]) => {\n        if (objectMatch(event, keyCombo)) {\n          this.props.onHotKey(name, event, this);\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleKeyDown\", event => {\n      if (event.key === 'Escape') {\n        this.setState({\n          searching: false,\n          searchTerm: this.props.initialValue\n        });\n        this.inputBox.current.blur();\n        this.escapeKey = true; // eslint-disable-next-line no-param-reassign\n\n        event.nativeEvent.preventDownshiftDefault = true;\n      }\n    });\n\n    _defineProperty(this, \"handleSearch\", event => {\n      const {\n        value: searchTerm = ''\n      } = event.target;\n\n      if (this.escapeKey) {\n        this.escapeKey = false;\n        return;\n      }\n\n      this.setState({\n        message: 'Searching...',\n        searching: Boolean(searchTerm),\n        searchTerm\n      });\n\n      if (searchTerm) {\n        this.debouncedSearch(searchTerm);\n      }\n    });\n\n    _defineProperty(this, \"handleSelect\", option => {\n      const {\n        clearOnSelect,\n        onSelect,\n        valueGetter\n      } = this.props;\n      onSelect(option);\n      this.inputBox.current.blur();\n\n      if (clearOnSelect) {\n        this.setState({\n          searching: false,\n          searchTerm: ''\n        });\n      } else {\n        this.setState({\n          searching: false,\n          searchTerm: valueGetter(option)\n        });\n      }\n    });\n\n    _defineProperty(this, \"renderOption\", (option, index, itemProps) => /*#__PURE__*/_jsxs(\"li\", _objectSpread(_objectSpread({\n      className: \"search-result\"\n    }, itemProps), {}, {\n      children: [/*#__PURE__*/_jsx(\"b\", {\n        className: \"title\",\n        children: option.title\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"preview\",\n        children: [option.preview, \"...\"]\n      })]\n    }), index));\n\n    _defineProperty(this, \"render\", () => {\n      const _this$props = this.props,\n            {\n        className,\n        placeholder\n      } = _this$props,\n            props = _objectWithoutProperties(_this$props, [\"className\", \"placeholder\"]);\n\n      const {\n        message,\n        options,\n        searching,\n        searchTerm\n      } = this.state;\n      const {\n        theme\n      } = this.context;\n      const renderOption = this.props.renderOption || this.renderOption;\n      const OverlayIcon = searching ? LoadingIcon : SearchIcon;\n      const inputHasFocus = this.inputBox.current && this.inputBox.current.matches(':focus');\n      return /*#__PURE__*/_jsx(Downshift, _objectSpread(_objectSpread({\n        id: \"search-box\",\n        ref: this.downshift\n      }, props), {}, {\n        itemToString: article => article ? article.title : '',\n        isOpen: Boolean(searchTerm) && inputHasFocus,\n        onSelect: this.handleSelect,\n        children: ({\n          getInputProps,\n          getItemProps,\n          getMenuProps,\n          isOpen\n        }) => /*#__PURE__*/_jsxs(\"div\", {\n          className: `${className} search-box ${isOpen ? 'open' : 'closed'}`,\n          style: {\n            color: theme.normalText\n          },\n          children: [/*#__PURE__*/_jsx(\"input\", _objectSpread(_objectSpread({}, getInputProps({\n            onKeyDown: this.handleKeyDown\n          })), {}, {\n            className: \"input\",\n            ref: this.inputBox,\n            onChange: this.handleSearch,\n            onFocus: this.handleFocus,\n            placeholder: placeholder,\n            value: searchTerm\n          })), searching || !options.length ? isOpen && /*#__PURE__*/_jsx(\"div\", {\n            className: \"search-results message\",\n            children: message\n          }) : isOpen && /*#__PURE__*/_jsx(\"ul\", _objectSpread(_objectSpread({}, getMenuProps()), {}, {\n            className: \"search-results list\",\n            children: options.map((option, index) => renderOption(option, index, getItemProps({\n              index,\n              item: option,\n              key: option._id\n            })))\n          })), /*#__PURE__*/_jsx(OverlayIcon, {\n            className: \"search icon\"\n          })]\n        })\n      }));\n    });\n  }\n\n}\n\n_defineProperty(SearchBox, \"contextType\", Application);\n\n_defineProperty(SearchBox, \"displayName\", 'SearchBox');\n\n_defineProperty(SearchBox, \"defaultProps\", {\n  className: '',\n  clearOnSelect: false,\n  hotkeys: {},\n  initialValue: '',\n  limit: 10,\n  onHotKey: noop,\n  onSelect: noop,\n  placeholder: 'Search...',\n  renderOption: null,\n  selectOnFocus: true,\n  url: '',\n  valueGetter: option => option\n});","map":null,"metadata":{},"sourceType":"module"}