{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport kebabCase from '~/utilities/kebabCase';\nimport unique from '~/utilities/unique';\n\nvar strip = function strip(string) {\n  return string.replace(/\\s|\\r|\\n/g, '-').replace(/-{2,}/g, '-').replace(/[^a-z0-9._-]/gi, '');\n};\n\nexport function slugify(input) {\n  if (Array.isArray(input)) {\n    var list = input.map(slugify).filter(function (slug) {\n      return slug;\n    });\n    return unique(list).sort();\n  }\n\n  if (!input || typeof input === 'object' || typeof input === 'function') {\n    return ''; // Return '' for all falsy values, objects and fn's\n  }\n\n  var lowercase = strip(input).toLowerCase();\n  return lowercase.split('.').map(kebabCase).join('.'); // Split file.ext and kebab-case each section, then rejoin\n}\nexport function extractUrlSlug(input) {\n  if (Array.isArray(input)) {\n    return input.map(extractUrlSlug).filter(function (slug) {\n      return slug;\n    });\n  }\n\n  if (typeof input !== 'string') return '';\n  return slugify(input.split(/[/\\\\]/g).pop().split(/[?#]/g).shift());\n}\nexport function slugifyUrl(input) {\n  if (Array.isArray(input)) {\n    return input.map(slugifyUrl).filter(function (slug) {\n      return slug;\n    });\n  }\n\n  if (typeof input !== 'string') return '';\n  var result = [];\n\n  var _input$split$reverse = input.split('/').reverse(),\n      _input$split$reverse2 = _toArray(_input$split$reverse),\n      file = _input$split$reverse2[0],\n      path = _input$split$reverse2.slice(1);\n\n  var _file$split = file.split('.'),\n      _file$split2 = _slicedToArray(_file$split, 2),\n      slug = _file$split2[0],\n      extension = _file$split2[1];\n\n  if (path.length) {\n    result = [path.reverse().join('/'), '/'];\n  }\n\n  result.push(slugify(slug));\n\n  if (extension) {\n    result = [].concat(_toConsumableArray(result), ['.', extension]);\n  }\n\n  return result.join('');\n}","map":null,"metadata":{},"sourceType":"module"}