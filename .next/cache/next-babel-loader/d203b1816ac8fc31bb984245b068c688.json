{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Link } from '~/components/Link/Link';\nimport TagIcon from '~/icons/tag.svg';\nimport './Links.scss';\n\nconst renderCampaignLink = campaign => /*#__PURE__*/_jsx(\"li\", {\n  title: campaign.title,\n  children: /*#__PURE__*/_jsx(Link, _objectSpread(_objectSpread({}, campaign), {}, {\n    type: \"campaign\",\n    children: campaign.title\n  }))\n}, campaign.subdomain);\n\nconst renderPageLink = ({\n  slug,\n  subdomain,\n  title,\n  type\n}) => /*#__PURE__*/_jsx(\"li\", {\n  title: title,\n  children: /*#__PURE__*/_jsx(Link, _objectSpread(_objectSpread({}, {\n    slug,\n    subdomain,\n    type\n  }), {}, {\n    children: title\n  }))\n}, slug);\n\nexport function Links({\n  caption = 'Child Articles',\n  className = '',\n  icon = /*#__PURE__*/_jsx(TagIcon, {}),\n  pages = [],\n  type = 'article'\n}) {\n  if (!pages.length) return null;\n  let links = pages.sort((a, b) => a.title.localeCompare(b.title)).map((_ref) => {\n    let {\n      campaign = {}\n    } = _ref,\n        props = _objectWithoutProperties(_ref, [\"campaign\"]);\n\n    return _objectSpread(_objectSpread({}, campaign), {}, {\n      type\n    }, props);\n  });\n\n  if (type === 'campaign') {\n    links = links.map(renderCampaignLink);\n  } else {\n    links = links.map(renderPageLink);\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: `links ${className}`.trim(),\n    children: [/*#__PURE__*/_jsxs(\"header\", {\n      children: [icon, \" \", caption]\n    }), /*#__PURE__*/_jsx(\"ul\", {\n      className: \"list\",\n      children: links\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}