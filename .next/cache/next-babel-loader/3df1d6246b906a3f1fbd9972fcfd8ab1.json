{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Alert } from '~/components/Alert/Alert';\nimport { Editable } from '~/components/Editable/Editable';\nimport IFrame from '~/components/IFrame/IFrame';\nimport { Toggle } from '~/components/Toggle/Toggle';\nimport { Application } from '~/contexts/Application';\nimport NavigationIcon from '~/icons/Navigation';\nimport PublicIcon from '~/icons/public.svg';\nimport SecretIcon from '~/icons/secret.svg';\nimport { confirm } from '~/utilities/confirm';\nimport { pluck } from '~/utilities/pluck';\nimport { URI } from '~/utilities/URI';\nimport './map.scss';\nconst STATE_FIELDS = ['_id', 'checksum', 'data', 'isOwner', 'isEditable', 'secret', 'slug', 'svg', 'title'];\nexport default class Map extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", _objectSpread(_objectSpread({}, pluck(this.props, STATE_FIELDS)), {}, {\n      generating: false\n    }));\n\n    _defineProperty(this, \"handleDelete\", async () => {\n      const {\n        router\n      } = this.context;\n      const {\n        slug\n      } = this.props;\n      if (!(await confirm('Are you sure you want to permanently delete this map?'))) return;\n      await fetch(`/api/map/${slug}`, {\n        method: 'DELETE'\n      });\n      const map = await fetch(`/api/map/${slug}`);\n\n      const json = _objectSpread(_objectSpread({}, pluck(await map.json(), STATE_FIELDS)), {}, {\n        _id: null,\n        data: null,\n        title: router.query.title || ''\n      });\n\n      this.context.updateUser();\n      this.setState(_objectSpread(_objectSpread({}, json), {}, {\n        generating: false\n      }));\n    });\n\n    _defineProperty(this, \"handleGenerate\", () => this.setState({\n      generating: true\n    }));\n\n    _defineProperty(this, \"handleOnReady\", async ({\n      window\n    }) => {\n      this.iframeWindow = window;\n      const {\n        _id,\n        checksum,\n        data,\n        generating\n      } = this.state;\n      const {\n        slug\n      } = this.props;\n\n      if (data) {\n        window.displayJsonData(data);\n      } else if (_id) {\n        this.setState({\n          loading: true\n        });\n        const map = await fetch(`/api/map/${slug}/${checksum}`, {\n          credentials: 'include'\n        }).then(response => response.json()).catch(() => null);\n\n        if (map && map.data) {\n          window.displayJsonData(map.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      } else if (generating) {\n        window.regenerateMap(() => this.setState({\n          data: window.packageJsonData()\n        }));\n      }\n    });\n\n    _defineProperty(this, \"handleSave\", async () => {\n      this.setState({\n        saving: true\n      });\n      const data = this.iframeWindow.packageJsonData();\n      const saved = await fetch(`/api/map/${this.props.slug}`, {\n        body: JSON.stringify(_objectSpread(_objectSpread({}, pluck(this.state, STATE_FIELDS)), {}, {\n          data\n        })),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST'\n      }).then(r => r.json());\n      this.setState(_objectSpread(_objectSpread({}, saved), {}, {\n        saving: false\n      }));\n    });\n\n    _defineProperty(this, \"handleTitleChange\", title => this.setState({\n      title\n    }));\n\n    _defineProperty(this, \"handleToggleNavigation\", async () => {\n      const {\n        slug,\n        title\n      } = this.props;\n      const {\n        campaign\n      } = this.context;\n\n      if (!campaign) {\n        return;\n      }\n\n      let navigation = campaign.navigation || [];\n\n      if (this.isNavLink) {\n        navigation = navigation.filter(n => n.slug !== slug);\n      } else {\n        navigation.push({\n          slug,\n          title\n        });\n      }\n\n      this.context.updateCampaign({\n        navigation\n      });\n    });\n\n    _defineProperty(this, \"handleToggleSecret\", async () => {\n      this.handleUpdate({\n        secret: !this.state.secret\n      });\n    });\n\n    _defineProperty(this, \"handleUpdate\", async payload => {\n      const keys = Object.keys(payload);\n      const response = await fetch(`/api/map/${this.props.slug}`, {\n        body: JSON.stringify(payload),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST'\n      });\n      const updated = pluck(await response.json(), ...keys);\n\n      if (response.status === 200) {\n        this.setState(updated);\n      }\n    });\n\n    _defineProperty(this, \"render\", () => {\n      const {\n        campaign\n      } = this.context;\n      const {\n        slug\n      } = this.props;\n      const {\n        _id,\n        data,\n        loading,\n        generating,\n        isEditable,\n        isOwner,\n        saving,\n        secret,\n        title\n      } = this.state;\n      let contents;\n\n      if (_id || isEditable && generating) {\n        contents = /*#__PURE__*/_jsx(IFrame, {\n          bodyClasses: [isEditable ? 'editable' : 'readOnly'],\n          className: \"map-frame\",\n          css: `\n\t\t\t\t\t\t.readOnly #viewbox, .readOnly #scaleBar {\n\t\t\t\t\t\t\tpointer-events: none;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t.readOnly #optionsTab, .readOnly #toolsTab, .readOnly #regenerate {\n\t\t\t\t\t\t\tdisplay: none!important;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#loading, #initial { display: none; }\n\t\t\t\t\t`,\n          onReady: this.handleOnReady,\n          src: \"/static/fantasy-map-generator\",\n          queryString: {\n            doNotGenerate: true\n          },\n          title: \"map\"\n        });\n      } else if (isEditable) {\n        contents = /*#__PURE__*/_jsx(Alert, {\n          className: \"center\",\n          children: isEditable && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [\"This map doesn't exist. Would you like to \", /*#__PURE__*/_jsx(\"button\", {\n              className: \"safe\",\n              onClick: this.handleGenerate,\n              children: \"Generate It?\"\n            })]\n          })\n        });\n      } else {\n        contents = /*#__PURE__*/_jsx(Alert, {\n          className: \"center\",\n          children: \"This map either doesn't exist, or you don't have permission to view it.\"\n        });\n      }\n\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: `map page ${loading ? 'loading' : ''}`,\n        children: [!data && generating && /*#__PURE__*/_jsx(\"div\", {\n          className: \"generating\",\n          children: \"Generating map...\"\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"title-bar\",\n          children: [/*#__PURE__*/_jsx(Editable, {\n            className: `title ${title.trim() ? '' : 'default'}`,\n            onChange: this.handleTitleChange,\n            placeholder: slug,\n            readOnly: !isEditable,\n            value: title\n          }), _id && isOwner && /*#__PURE__*/_jsx(Toggle, {\n            className: \"secret\",\n            value: secret,\n            offIcon: PublicIcon,\n            onIcon: SecretIcon,\n            onToggle: this.handleToggleSecret\n          }), _id && campaign.isEditor && /*#__PURE__*/_jsx(Toggle, {\n            className: \"in-navigation\",\n            value: this.isNavLink,\n            offIcon: NavigationIcon,\n            offProps: {\n              title: 'Not Added to Site Navigation'\n            },\n            onIcon: NavigationIcon,\n            onProps: {\n              title: 'Added to Site Navigation'\n            },\n            onToggle: this.handleToggleNavigation\n          }), (data || generating) && isEditable && /*#__PURE__*/_jsx(\"button\", {\n            className: \"safe\",\n            onClick: this.handleSave,\n            disabled: saving,\n            children: \"Save\"\n          }), _id && isEditable && /*#__PURE__*/_jsx(\"button\", {\n            className: \"danger\",\n            onClick: this.handleDelete,\n            children: \"Delete\"\n          })]\n        }), contents]\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.slug !== state.slug) {\n      const fields = pluck(props, STATE_FIELDS);\n      const {\n        title\n      } = props || new URLSearchParams(window.location.search).get('title') || '';\n      return _objectSpread(_objectSpread({}, fields), {}, {\n        title\n      });\n    }\n\n    return state;\n  }\n\n}\n\n_defineProperty(Map, \"contextType\", Application);\n\n_defineProperty(Map, \"getInitialProps\", async ({\n  query,\n  req\n}) => {\n  const headers = pluck(req && req.headers, 'cookie');\n  const result = await fetch(URI(req, `/api/map/${query.slug}`), {\n    headers\n  });\n  const json = await result.json();\n  return _objectSpread({\n    httpStatusCode: result.status\n  }, json);\n});","map":null,"metadata":{},"sourceType":"module"}