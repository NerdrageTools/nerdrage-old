{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { distanceInWordsToNow } from 'date-fns';\nimport React, { Component } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { Editable } from '~/components/Editable/Editable';\nimport { Links } from '~/components/Links/Links';\nimport { Toggle } from '~/components/Toggle/Toggle';\nimport { Application } from '~/contexts/Application';\nimport AdminIcon from '~/icons/Administrator';\nimport DiceIcon from '~/icons/dice.svg';\nimport FavoriteIcon from '~/icons/favorite-on.svg';\nimport SheetIcon from '~/icons/sheet.svg';\nimport Error from '~/pages/_error';\nimport { confirm } from '~/utilities/confirm';\nimport { pluck } from '~/utilities/pluck';\nimport { URI } from '~/utilities/URI';\nimport './user.scss';\nconst UPDATABLE_FIELDS = ['email', 'favorites', 'name', 'username'];\n\nconst formatTime = time => distanceInWordsToNow(time, {\n  addSuffix: true\n});\n\nexport default class UserPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      saved: pluck(this.props.user, UPDATABLE_FIELDS),\n      user: this.props.user\n    });\n\n    _defineProperty(this, \"handleNameChange\", name => this.setState({\n      user: _objectSpread(_objectSpread({}, this.state.user), {}, {\n        name\n      })\n    }));\n\n    _defineProperty(this, \"handleSave\", async () => {\n      const response = await fetch(`/api/user/${this.state.user.username || ''}`, {\n        body: JSON.stringify(pluck(this.state.user, UPDATABLE_FIELDS)),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST'\n      });\n\n      if (response.status === 200) {\n        const saved = await response.json();\n        return this.setState({\n          saved,\n          user: _objectSpread(_objectSpread({}, this.state.user), saved)\n        });\n      }\n\n      return this.setState(await response.json());\n    });\n\n    _defineProperty(this, \"handleToggleAdmin\", async () => {\n      const {\n        isAdmin,\n        username\n      } = this.state.user;\n      const action = isAdmin ? 'revoke' : 'grant';\n\n      if (await confirm(`Are you sure you want to ${action} this user Admin privileges?`)) {\n        const response = await fetch(`/api/user/${username}`, {\n          body: JSON.stringify({\n            isAdmin: !isAdmin\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          method: 'POST'\n        });\n\n        if (response.status === 200) {\n          return this.setState({\n            user: await response.json()\n          });\n        }\n\n        return this.setState(await response.json());\n      }\n\n      return undefined;\n    });\n\n    _defineProperty(this, \"render\", () => {\n      const {\n        httpStatusCode,\n        message\n      } = this.props;\n      const {\n        user: currentUser\n      } = this.context;\n      const {\n        user\n      } = this.state;\n      const isEditable = user === currentUser || currentUser.isAdmin;\n\n      if (httpStatusCode !== 200) {\n        return /*#__PURE__*/_jsx(Error, {\n          statusCode: httpStatusCode,\n          message: message\n        });\n      }\n\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: \"user page\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"title-bar\",\n          children: [/*#__PURE__*/_jsx(Editable, {\n            className: \"title\",\n            onChange: this.handleNameChange,\n            placeholder: \"Name\",\n            readOnly: !isEditable,\n            value: user.name\n          }), isEditable && this.isDirty && /*#__PURE__*/_jsx(\"button\", {\n            className: \"update safe\",\n            onClick: this.handleSave,\n            children: \"Save\"\n          }), currentUser.isAdmin ? /*#__PURE__*/_jsx(Toggle, {\n            className: \"is-admin\",\n            onClick: this.handleToggleAdmin,\n            offIcon: AdminIcon,\n            offProps: {\n              title: 'Not an Administrator'\n            },\n            onIcon: AdminIcon,\n            onProps: {\n              title: 'Administrator'\n            },\n            value: user.isAdmin\n          }) : user.isAdmin && /*#__PURE__*/_jsx(AdminIcon, {\n            className: \"is-admin toggle on\"\n          })]\n        }), /*#__PURE__*/_jsxs(Scrollbars, {\n          className: \"contents scrollbars\",\n          universal: true,\n          autoHide: true,\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"user-info\",\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsx(\"b\", {\n                children: \"Username:\"\n              }), \" \", /*#__PURE__*/_jsx(\"span\", {\n                children: user.username\n              })]\n            }), user.email && /*#__PURE__*/_jsxs(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsx(\"b\", {\n                children: \"Email Address:\"\n              }), \" \", /*#__PURE__*/_jsx(\"span\", {\n                children: user.email\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsx(\"b\", {\n                children: \"Joined:\"\n              }), /*#__PURE__*/_jsx(\"span\", {\n                title: Date(user.createdAt).toLocaleString(),\n                children: formatTime(user.createdAt)\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsx(\"b\", {\n                children: \"Last Login:\"\n              }), /*#__PURE__*/_jsx(\"span\", {\n                title: Date(user.lastLogin).toLocaleString(),\n                children: formatTime(user.lastLogin)\n              })]\n            })]\n          }), user.favorites && /*#__PURE__*/_jsx(Links, {\n            caption: \"Favorites\",\n            icon: /*#__PURE__*/_jsx(FavoriteIcon, {\n              className: \"favorites icon\"\n            }),\n            pages: user.favorites\n          }), user.campaigns && /*#__PURE__*/_jsx(Links, {\n            caption: \"Campaigns\",\n            icon: /*#__PURE__*/_jsx(DiceIcon, {}),\n            pages: user.campaigns,\n            type: \"campaign\"\n          }), user.sheets && /*#__PURE__*/_jsx(Links, {\n            caption: \"Sheets\",\n            icon: /*#__PURE__*/_jsx(SheetIcon, {}),\n            pages: user.sheets,\n            type: \"sheet\"\n          })]\n        })]\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.user.username !== state.user.username) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        saved: pluck(props.user, UPDATABLE_FIELDS),\n        user: props.user\n      });\n    }\n\n    return state;\n  }\n\n  get isDirty() {\n    const fromState = JSON.stringify(pluck(this.state.user, UPDATABLE_FIELDS));\n    const fromSaved = JSON.stringify(pluck(this.state.saved, UPDATABLE_FIELDS));\n    return fromState !== fromSaved;\n  }\n\n}\n\n_defineProperty(UserPage, \"contextType\", Application);\n\n_defineProperty(UserPage, \"defaultProps\", {\n  httpStatusCode: 200,\n  message: '',\n  user: {\n    anonymous: true\n  }\n});\n\n_defineProperty(UserPage, \"getInitialProps\", async ({\n  query,\n  req\n}) => {\n  const headers = pluck(req && req.headers, 'cookie');\n  const result = await fetch(URI(req, `/api/user/${query.slug}`), {\n    headers\n  });\n  const json = await result.json();\n\n  if (result.status !== 200) {\n    return _objectSpread({\n      httpStatusCode: result.status\n    }, json);\n  }\n\n  return {\n    user: json\n  };\n});","map":null,"metadata":{},"sourceType":"module"}