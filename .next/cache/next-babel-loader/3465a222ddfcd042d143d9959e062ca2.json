{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { Link } from '~/components/Link/Link';\nimport { Toggle } from '~/components/Toggle/Toggle';\nimport PublicIcon from '~/icons/public.svg';\nimport SecretIcon from '~/icons/secret.svg';\nimport TemplateIcon from '~/icons/template.svg';\nimport './SheetList.scss';\n\nconst loadSheets = () => fetch('/api/sheet/list-by/campaign', {\n  credentials: 'include'\n}).then(response => response.json());\n\nexport default function SheetList({\n  className = ''\n}) {\n  const {\n    0: loaded,\n    1: setLoaded\n  } = useState(false);\n  const {\n    0: filter,\n    1: setFilter\n  } = useState('');\n  const {\n    0: sheets,\n    1: setSheets\n  } = useState([]);\n  useEffect(() => {\n    loadSheets().then(json => {\n      setSheets(json);\n      setLoaded(true);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: `sheet-list ${className}`,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"title\",\n      children: \"Sheets\"\n    }), sheets.message ? /*#__PURE__*/_jsx(\"div\", {\n      className: \"message\",\n      children: sheets.message\n    }) : /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        className: \"filter\",\n        onChange: ({\n          target\n        }) => setFilter(target.value),\n        placeholder: \"Filter...\",\n        type: \"text\",\n        value: filter\n      }), /*#__PURE__*/_jsx(Scrollbars, {\n        className: `scrollable ${loaded ? 'loaded' : 'loading'}`,\n        universal: true,\n        children: /*#__PURE__*/_jsx(\"table\", {\n          children: /*#__PURE__*/_jsx(\"tbody\", {\n            children: sheets.filter(s => s.title.toLowerCase().match(filter.toLowerCase())).map(sheet => /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"td\", {\n                className: \"link\",\n                children: /*#__PURE__*/_jsx(Link, _objectSpread(_objectSpread({\n                  type: \"sheet\"\n                }, sheet), {}, {\n                  children: sheet.title\n                }))\n              }), /*#__PURE__*/_jsxs(\"td\", {\n                className: \"properties\",\n                children: [/*#__PURE__*/_jsx(Toggle, {\n                  onIcon: SecretIcon,\n                  offIcon: PublicIcon,\n                  value: sheet.secret\n                }), /*#__PURE__*/_jsx(Toggle, {\n                  onIcon: TemplateIcon,\n                  offIcon: TemplateIcon,\n                  value: sheet.template\n                })]\n              })]\n            }, sheet._id))\n          })\n        })\n      })]\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}