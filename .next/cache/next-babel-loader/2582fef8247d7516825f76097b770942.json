{"ast":null,"code":"import kebabCase from '~/utilities/kebabCase';\nimport unique from '~/utilities/unique';\n\nconst strip = string => string.replace(/\\s|\\r|\\n/g, '-').replace(/-{2,}/g, '-').replace(/[^a-z0-9._-]/gi, '');\n\nexport function slugify(input) {\n  if (Array.isArray(input)) {\n    const list = input.map(slugify).filter(slug => slug);\n    return unique(list).sort();\n  }\n\n  if (!input || typeof input === 'object' || typeof input === 'function') {\n    return ''; // Return '' for all falsy values, objects and fn's\n  }\n\n  const lowercase = strip(input).toLowerCase();\n  return lowercase.split('.').map(kebabCase).join('.'); // Split file.ext and kebab-case each section, then rejoin\n}\nexport function extractUrlSlug(input) {\n  if (Array.isArray(input)) {\n    return input.map(extractUrlSlug).filter(slug => slug);\n  }\n\n  if (typeof input !== 'string') return '';\n  return slugify(input.split(/[/\\\\]/g).pop().split(/[?#]/g).shift());\n}\nexport function slugifyUrl(input) {\n  if (Array.isArray(input)) {\n    return input.map(slugifyUrl).filter(slug => slug);\n  }\n\n  if (typeof input !== 'string') return '';\n  let result = [];\n  const [file, ...path] = input.split('/').reverse();\n  const [slug, extension] = file.split('.');\n\n  if (path.length) {\n    result = [path.reverse().join('/'), '/'];\n  }\n\n  result.push(slugify(slug));\n\n  if (extension) {\n    result = [...result, '.', extension];\n  }\n\n  return result.join('');\n}","map":null,"metadata":{},"sourceType":"module"}