{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport EditableList from '~/components/EditableList/EditableList';\nimport { Link } from '~/components/Link/Link';\nimport UserSearchBox from '~/components/SearchBox/UserSearchBox';\nimport NerdIcon from '~/icons/nerd.svg';\nimport RemoveIcon from '~/icons/remove.svg';\nimport compareBy from '~/utilities/compareBy';\nimport { noop } from '~/utilities/noop';\nimport { pluck } from '~/utilities/pluck';\nimport './Participants.scss';\nvar ORDER = {\n  editor: 2,\n  owner: 1,\n  player: 3,\n  removed: 4\n};\n\nvar addParticipants = function addParticipants(map, users, addition) {\n  users.forEach(function (user) {\n    map.set(user._id, _objectSpread(_objectSpread(_objectSpread({}, map.get(user._id) || user), user), addition));\n  });\n};\n\nvar Participants = /*#__PURE__*/function (_Component) {\n  _inherits(Participants, _Component);\n\n  var _super = _createSuper(Participants);\n\n  function Participants() {\n    var _this;\n\n    _classCallCheck(this, Participants);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      edits: [],\n      participants: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSetEdit\", function (user) {\n      var edit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!user) return;\n      var _this$state = _this.state,\n          current = _this$state.current,\n          edits = _this$state.edits;\n      var exists = current.find(function (p) {\n        return p._id === user._id;\n      });\n      var currentEdit = edits.find(function (e) {\n        return e._id === user._id;\n      }) || {};\n      var updated = edits.filter(function (e) {\n        return e._id !== user._id;\n      });\n\n      if (edit.type === 'added' && !exists) {\n        updated.push(_objectSpread(_objectSpread(_objectSpread({}, user), edit), pluck(currentEdit, 'level', 'order')));\n      }\n\n      if (edit.type === 'removed' && exists && currentEdit.type !== 'removed') {\n        updated.push(_objectSpread(_objectSpread(_objectSpread({}, user), edit), pluck(currentEdit, 'level', 'order')));\n      }\n\n      if (edit.type === 'updated') {\n        updated.push(_objectSpread(_objectSpread({}, user), edit));\n      }\n\n      _this.setState({\n        edits: updated\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddUser\", function (user) {\n      if (!user) return;\n\n      _this.handleSetEdit(user, {\n        level: 'player',\n        order: ORDER.player,\n        type: 'added'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSetPermission\", function (user, level) {\n      if (!user) return;\n\n      _this.handleSetEdit(user, {\n        level: level,\n        order: ORDER[level],\n        type: 'updated'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleToggleRemoved\", function (user) {\n      if (!user) return;\n\n      _this.handleSetEdit(user, {\n        level: 'removed',\n        order: ORDER.removed,\n        type: 'removed'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSave\", function () {\n      var participants = _this.state.participants;\n\n      _this.props.onSave({\n        editors: participants.filter(function (p) {\n          return p.level === 'editor';\n        }),\n        owners: participants.filter(function (p) {\n          return p.level === 'owner';\n        }),\n        players: participants.filter(function (p) {\n          return p.level === 'player';\n        })\n      });\n\n      _this.setState({\n        edits: []\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      var _this$props = _this.props,\n          className = _this$props.className,\n          readOnly = _this$props.readOnly,\n          saving = _this$props.saving,\n          title = _this$props.title;\n      var participants = _this.state.participants;\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: \"participants \".concat(className, \" \").concat(saving ? 'loading' : ''),\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"title\",\n          children: title\n        }), /*#__PURE__*/_jsx(Scrollbars, {\n          className: \"contents scrollbars\",\n          universal: true,\n          children: /*#__PURE__*/_jsx(\"ul\", {\n            className: \"participant-list\",\n            children: participants.map(function (user) {\n              return /*#__PURE__*/_jsxs(\"li\", {\n                className: \"participant row \".concat(user.type || ''),\n                children: [/*#__PURE__*/_jsx(NerdIcon, {\n                  className: \"nerd icon\"\n                }), /*#__PURE__*/_jsxs(Link, {\n                  className: \"display\",\n                  type: \"user\",\n                  slug: user.username,\n                  children: [/*#__PURE__*/_jsx(\"span\", {\n                    className: \"name\",\n                    title: user.name,\n                    children: user.name\n                  }), /*#__PURE__*/_jsxs(\"span\", {\n                    className: \"username\",\n                    title: user.username,\n                    children: [\"(\", user.username, \")\"]\n                  })]\n                }), !readOnly && /*#__PURE__*/_jsxs(_Fragment, {\n                  children: [/*#__PURE__*/_jsx(EditableList, {\n                    className: \"role\",\n                    defaultValue: user.level,\n                    onChange: function onChange(level) {\n                      return _this.handleSetPermission(user, level);\n                    },\n                    options: ['owner', 'editor', 'player']\n                  }), /*#__PURE__*/_jsx(RemoveIcon, {\n                    className: \"remove icon\",\n                    onClick: function onClick() {\n                      return _this.handleToggleRemoved(user);\n                    }\n                  })]\n                })]\n              }, user._id);\n            })\n          })\n        }), !readOnly && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(UserSearchBox, {\n            className: \"add-user\",\n            onSelect: _this.handleAddUser\n          }), _this.state.edits.length !== 0 && /*#__PURE__*/_jsx(\"button\", {\n            className: \"save safe\",\n            onClick: _this.handleSave,\n            children: \"Save\"\n          })]\n        })]\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Participants, null, [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var editors = props.editors,\n          owners = props.owners,\n          players = props.players;\n      var edits = state.edits;\n      var map = new Map();\n      addParticipants(map, players, {\n        level: 'player',\n        order: ORDER.player\n      });\n      addParticipants(map, editors, {\n        level: 'editor',\n        order: ORDER.editor\n      });\n      addParticipants(map, owners, {\n        level: 'owner',\n        order: ORDER.owner\n      });\n      var current = Array.from(map.values()).sort(compareBy('order'));\n      addParticipants(map, edits);\n      var participants = Array.from(map.values()).sort(compareBy('order'));\n      return _objectSpread(_objectSpread({}, state), {}, {\n        current: current,\n        participants: participants\n      });\n    }\n  }]);\n\n  return Participants;\n}(Component);\n\n_defineProperty(Participants, \"defaultProps\", {\n  className: '',\n  editors: [],\n  onSave: noop,\n  owners: [],\n  players: [],\n  readOnly: false,\n  saving: false,\n  title: 'Participants'\n});\n\nexport { Participants as default };","map":null,"metadata":{},"sourceType":"module"}