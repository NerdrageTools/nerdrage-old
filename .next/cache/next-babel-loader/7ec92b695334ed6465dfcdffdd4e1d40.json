{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport bound from '~/utilities/bound';\nimport { noop } from '~/utilities/noop';\nimport './Editable.scss';\nvar TYPES = [// Strings\n'text', 'multiline', // Checkboxes\n'boolean', // Numbers\n'number', 'slider'];\nexport var Editable = /*#__PURE__*/function (_Component) {\n  _inherits(Editable, _Component);\n\n  var _super = _createSuper(Editable);\n\n  function Editable() {\n    var _this;\n\n    _classCallCheck(this, Editable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      editing: false,\n      resetValue: _this.props.value\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getEditorType\", function () {\n      var value = _this.props.value;\n      var type = _this.props.type;\n\n      if (type !== undefined && TYPES.includes(type)) {\n        return type;\n      }\n\n      type = typeof value;\n\n      if (type === 'string') {\n        return value.includes('\\n') ? 'multiline' : 'text';\n      }\n\n      if (['boolean', 'number'].includes(type)) {\n        return type;\n      }\n\n      return 'text';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetChanges\", function () {\n      _this.props.onChange(_this.state.resetValue, _this.props.value);\n\n      _this.handleToggleEditing();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createRefWithAutoFocus\", function (editor) {\n      if (!editor) {\n        return;\n      }\n\n      _this.editor = editor;\n\n      var editorType = _this.getEditorType();\n\n      if (editorType !== 'boolean' && typeof editor.focus === 'function') {\n        editor.focus();\n      }\n\n      if (['boolean', 'number'].includes(_this.getEditorType())) {\n        return;\n      }\n\n      if (_this.props.forceEditMode && typeof editor.setSelectionRange === 'function') {\n        editor.setSelectionRange(editor.value.length, editor.value.length);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (_ref) {\n      var target = _ref.target;\n      var _this$props = _this.props,\n          min = _this$props.min,\n          max = _this$props.max;\n      var value = target.value; // eslint-disable-next-line default-case\n\n      switch (_this.getEditorType()) {\n        case 'slider':\n        case 'number':\n          value = parseFloat(value || 0); // eslint-disable-next-line prefer-destructuring\n\n          if (Number.isNaN(value)) {\n            value = _this.props.value;\n          }\n\n          value = bound(value, {\n            max: max,\n            min: min\n          });\n      }\n\n      _this.props.onChange(value, _this.state.resetValue);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeys\", function (event) {\n      var target = event.target,\n          key = event.key,\n          ctrlKey = event.ctrlKey,\n          metaKey = event.metaKey;\n\n      if (_this.props.onKeyDown !== noop) {\n        _this.props.onKeyDown(event);\n\n        if (event.isDefaultPrevented()) return;\n      }\n\n      if (key === 'Escape') {\n        _this.resetChanges();\n      }\n\n      if (key === 'Enter') {\n        if (target.nodeName !== 'TEXTAREA' || ctrlKey || metaKey) {\n          _this.handleToggleEditing();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleReceivingFocus\", function () {\n      if (_this.props.readOnly) {\n        return;\n      }\n\n      if (!_this.state.editing) {\n        _this.handleToggleEditing();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleToggleEditing\", function () {\n      if (_this.props.readOnly) {\n        return;\n      }\n\n      var editing = !_this.editing;\n\n      _this.setState({\n        editing: editing,\n        resetValue: _this.props.value\n      }, function () {\n        if (_this.state.editing) {\n          _this.props.onEditStart();\n        } else {\n          _this.props.onEditEnd();\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"selectOnFocus\", function (event) {\n      return event.target.select();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toggleBoolean\", function () {\n      _this.props.onEditStart();\n\n      _this.props.onChange(!_this.props.value, _this.props.value);\n\n      _this.props.onEditEnd();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderBoolean\", function () {\n      return /*#__PURE__*/_jsx(\"input\", {\n        type: \"checkbox\",\n        checked: Boolean(_this.props.value),\n        disabled: _this.props.readOnly,\n        onChange: _this.toggleBoolean,\n        ref: _this.createRefWithAutoFocus\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderMultiline\", function () {\n      if (!_this.editing) {\n        var lines = (_this.props.value || _this.props.placeholder).split('\\n');\n\n        var paragraphs = lines.map(function (line, index) {\n          return /*#__PURE__*/_jsx(\"p\", {\n            children: line\n          }, index);\n        });\n        var className = ['multiline', _this.props.value ? '' : 'placeholder'].join(' ').trim();\n        return /*#__PURE__*/_jsx(\"div\", {\n          className: className,\n          onClick: _this.handleToggleEditing,\n          children: paragraphs\n        });\n      }\n\n      return /*#__PURE__*/_jsx(\"textarea\", {\n        disabled: _this.props.readOnly,\n        onBlur: _this.handleToggleEditing,\n        onChange: _this.handleChange,\n        onFocus: _this.selectOnFocus,\n        onKeyDown: _this.handleKeys,\n        onKeyPress: _this.props.onKeyPress,\n        onKeyUp: _this.props.onKeyUp,\n        placeholder: _this.props.placeholder,\n        ref: _this.createRefWithAutoFocus,\n        rows: _this.props.value.split('\\n').length,\n        value: _this.props.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderNumber\", function () {\n      if (!_this.editing) {\n        return _this.renderStatic();\n      }\n\n      return /*#__PURE__*/_jsx(\"input\", {\n        type: \"number\",\n        disabled: _this.props.readOnly,\n        max: _this.props.max,\n        min: _this.props.min,\n        onBlur: _this.handleToggleEditing,\n        onChange: _this.handleChange,\n        onFocus: _this.selectOnFocus,\n        onKeyDown: _this.handleKeys,\n        onKeyPress: _this.props.onKeyPress,\n        onKeyUp: _this.props.onKeyUp,\n        placeholder: _this.props.placeholder,\n        ref: _this.createRefWithAutoFocus,\n        step: _this.props.step,\n        value: _this.props.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderSlider\", function () {\n      return /*#__PURE__*/_jsx(\"input\", {\n        type: \"range\",\n        disabled: _this.props.readOnly,\n        max: _this.props.max,\n        min: _this.props.min,\n        onBlur: _this.handleToggleEditing,\n        onChange: _this.handleChange,\n        onKeyDown: _this.props.onKeyDown,\n        onKeyPress: _this.props.onKeyPress,\n        onKeyUp: _this.props.onKeyUp,\n        ref: _this.createRefWithAutoFocus,\n        step: _this.props.step,\n        value: _this.props.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderText\", function () {\n      if (!_this.editing) {\n        return _this.renderStatic();\n      }\n\n      return /*#__PURE__*/_jsx(\"input\", {\n        type: \"text\",\n        disabled: _this.props.readOnly,\n        onBlur: _this.handleToggleEditing,\n        onChange: _this.handleChange,\n        onFocus: _this.selectOnFocus,\n        onKeyDown: _this.handleKeys,\n        onKeyPress: _this.props.onKeyPress,\n        onKeyUp: _this.props.onKeyUp,\n        placeholder: _this.props.placeholder,\n        ref: _this.createRefWithAutoFocus,\n        value: _this.props.value\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderStatic\", function () {\n      var _this$props2 = _this.props,\n          placeholder = _this$props2.placeholder,\n          readOnlyValue = _this$props2.readOnlyValue,\n          requireDoubleClick = _this$props2.requireDoubleClick,\n          value = _this$props2.value;\n      var showPlaceholder = placeholder && !value;\n      var displayValue = readOnlyValue !== undefined ? readOnlyValue : value;\n      var className = showPlaceholder ? 'placeholder' : '';\n      var eventHandlers = {};\n\n      if (!requireDoubleClick) {\n        eventHandlers.onClick = _this.handleToggleEditing;\n      }\n\n      return /*#__PURE__*/_jsx(\"span\", _objectSpread(_objectSpread({\n        className: className\n      }, eventHandlers), {}, {\n        children: showPlaceholder ? placeholder : displayValue\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderEditor\", function () {\n      switch (_this.getEditorType()) {\n        case 'boolean':\n          return _this.renderBoolean();\n\n        case 'slider':\n          return _this.renderSlider();\n\n        case 'multiline':\n          return _this.renderMultiline();\n\n        case 'number':\n          return _this.renderNumber();\n\n        default:\n          return _this.renderText();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      var _this$props3 = _this.props,\n          className = _this$props3.className,\n          readOnly = _this$props3.readOnly,\n          requireDoubleClick = _this$props3.requireDoubleClick;\n      var classes = ['editable', _this.editing ? 'editing' : '', className || '', readOnly ? 'readonly' : ''].filter(Boolean);\n      var props = {};\n\n      if (!readOnly && !_this.editing) {\n        if (requireDoubleClick) {\n          props.onDoubleClick = _this.handleToggleEditing;\n        } else {\n          props.tabIndex = '0';\n          props.onFocus = _this.handleReceivingFocus;\n        }\n      }\n\n      return /*#__PURE__*/_jsx(\"div\", _objectSpread(_objectSpread({\n        className: classes.join(' ')\n      }, props), {}, {\n        children: _this.renderEditor()\n      }));\n    });\n\n    return _this;\n  }\n\n  _createClass(Editable, [{\n    key: \"editing\",\n    get: function get() {\n      return this.props.forceEditMode || this.state.editing;\n    }\n  }]);\n\n  return Editable;\n}(Component);\n\n_defineProperty(Editable, \"displayName\", 'Editable');\n\n_defineProperty(Editable, \"defaultProps\", {\n  className: '',\n  forceEditMode: false,\n  max: undefined,\n  min: undefined,\n  onChange: noop,\n  onEditEnd: noop,\n  onEditStart: noop,\n  onKeyDown: noop,\n  onKeyPress: noop,\n  onKeyUp: noop,\n  placeholder: '',\n  readOnly: false,\n  readOnlyValue: undefined,\n  requireDoubleClick: false,\n  step: 1,\n  type: undefined,\n  value: ''\n});","map":null,"metadata":{},"sourceType":"module"}