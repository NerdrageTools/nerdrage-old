{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport bound from '~/utilities/bound';\nimport { noop } from '~/utilities/noop';\nimport './Editable.scss';\nconst TYPES = [// Strings\n'text', 'multiline', // Checkboxes\n'boolean', // Numbers\n'number', 'slider'];\nexport class Editable extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      editing: false,\n      resetValue: this.props.value\n    });\n\n    _defineProperty(this, \"getEditorType\", () => {\n      const {\n        value\n      } = this.props;\n      let {\n        type\n      } = this.props;\n\n      if (type !== undefined && TYPES.includes(type)) {\n        return type;\n      }\n\n      type = typeof value;\n\n      if (type === 'string') {\n        return value.includes('\\n') ? 'multiline' : 'text';\n      }\n\n      if (['boolean', 'number'].includes(type)) {\n        return type;\n      }\n\n      return 'text';\n    });\n\n    _defineProperty(this, \"resetChanges\", () => {\n      this.props.onChange(this.state.resetValue, this.props.value);\n      this.handleToggleEditing();\n    });\n\n    _defineProperty(this, \"createRefWithAutoFocus\", editor => {\n      if (!editor) {\n        return;\n      }\n\n      this.editor = editor;\n      const editorType = this.getEditorType();\n\n      if (editorType !== 'boolean' && typeof editor.focus === 'function') {\n        editor.focus();\n      }\n\n      if (['boolean', 'number'].includes(this.getEditorType())) {\n        return;\n      }\n\n      if (this.props.forceEditMode && typeof editor.setSelectionRange === 'function') {\n        editor.setSelectionRange(editor.value.length, editor.value.length);\n      }\n    });\n\n    _defineProperty(this, \"handleChange\", ({\n      target\n    }) => {\n      const {\n        min,\n        max\n      } = this.props;\n      let {\n        value\n      } = target; // eslint-disable-next-line default-case\n\n      switch (this.getEditorType()) {\n        case 'slider':\n        case 'number':\n          value = parseFloat(value || 0); // eslint-disable-next-line prefer-destructuring\n\n          if (Number.isNaN(value)) {\n            value = this.props.value;\n          }\n\n          value = bound(value, {\n            max,\n            min\n          });\n      }\n\n      this.props.onChange(value, this.state.resetValue);\n    });\n\n    _defineProperty(this, \"handleKeys\", event => {\n      const {\n        target,\n        key,\n        ctrlKey,\n        metaKey\n      } = event;\n\n      if (this.props.onKeyDown !== noop) {\n        this.props.onKeyDown(event);\n        if (event.isDefaultPrevented()) return;\n      }\n\n      if (key === 'Escape') {\n        this.resetChanges();\n      }\n\n      if (key === 'Enter') {\n        if (target.nodeName !== 'TEXTAREA' || ctrlKey || metaKey) {\n          this.handleToggleEditing();\n        }\n      }\n    });\n\n    _defineProperty(this, \"handleReceivingFocus\", () => {\n      if (this.props.readOnly) {\n        return;\n      }\n\n      if (!this.state.editing) {\n        this.handleToggleEditing();\n      }\n    });\n\n    _defineProperty(this, \"handleToggleEditing\", () => {\n      if (this.props.readOnly) {\n        return;\n      }\n\n      const editing = !this.editing;\n      this.setState({\n        editing,\n        resetValue: this.props.value\n      }, () => {\n        if (this.state.editing) {\n          this.props.onEditStart();\n        } else {\n          this.props.onEditEnd();\n        }\n      });\n    });\n\n    _defineProperty(this, \"selectOnFocus\", event => event.target.select());\n\n    _defineProperty(this, \"toggleBoolean\", () => {\n      this.props.onEditStart();\n      this.props.onChange(!this.props.value, this.props.value);\n      this.props.onEditEnd();\n    });\n\n    _defineProperty(this, \"renderBoolean\", () => /*#__PURE__*/_jsx(\"input\", {\n      type: \"checkbox\",\n      checked: Boolean(this.props.value),\n      disabled: this.props.readOnly,\n      onChange: this.toggleBoolean,\n      ref: this.createRefWithAutoFocus\n    }));\n\n    _defineProperty(this, \"renderMultiline\", () => {\n      if (!this.editing) {\n        const lines = (this.props.value || this.props.placeholder).split('\\n');\n        const paragraphs = lines.map((line, index) => /*#__PURE__*/_jsx(\"p\", {\n          children: line\n        }, index));\n        const className = ['multiline', this.props.value ? '' : 'placeholder'].join(' ').trim();\n        return /*#__PURE__*/_jsx(\"div\", {\n          className: className,\n          onClick: this.handleToggleEditing,\n          children: paragraphs\n        });\n      }\n\n      return /*#__PURE__*/_jsx(\"textarea\", {\n        disabled: this.props.readOnly,\n        onBlur: this.handleToggleEditing,\n        onChange: this.handleChange,\n        onFocus: this.selectOnFocus,\n        onKeyDown: this.handleKeys,\n        onKeyPress: this.props.onKeyPress,\n        onKeyUp: this.props.onKeyUp,\n        placeholder: this.props.placeholder,\n        ref: this.createRefWithAutoFocus,\n        rows: this.props.value.split('\\n').length,\n        value: this.props.value\n      });\n    });\n\n    _defineProperty(this, \"renderNumber\", () => {\n      if (!this.editing) {\n        return this.renderStatic();\n      }\n\n      return /*#__PURE__*/_jsx(\"input\", {\n        type: \"number\",\n        disabled: this.props.readOnly,\n        max: this.props.max,\n        min: this.props.min,\n        onBlur: this.handleToggleEditing,\n        onChange: this.handleChange,\n        onFocus: this.selectOnFocus,\n        onKeyDown: this.handleKeys,\n        onKeyPress: this.props.onKeyPress,\n        onKeyUp: this.props.onKeyUp,\n        placeholder: this.props.placeholder,\n        ref: this.createRefWithAutoFocus,\n        step: this.props.step,\n        value: this.props.value\n      });\n    });\n\n    _defineProperty(this, \"renderSlider\", () => /*#__PURE__*/_jsx(\"input\", {\n      type: \"range\",\n      disabled: this.props.readOnly,\n      max: this.props.max,\n      min: this.props.min,\n      onBlur: this.handleToggleEditing,\n      onChange: this.handleChange,\n      onKeyDown: this.props.onKeyDown,\n      onKeyPress: this.props.onKeyPress,\n      onKeyUp: this.props.onKeyUp,\n      ref: this.createRefWithAutoFocus,\n      step: this.props.step,\n      value: this.props.value\n    }));\n\n    _defineProperty(this, \"renderText\", () => {\n      if (!this.editing) {\n        return this.renderStatic();\n      }\n\n      return /*#__PURE__*/_jsx(\"input\", {\n        type: \"text\",\n        disabled: this.props.readOnly,\n        onBlur: this.handleToggleEditing,\n        onChange: this.handleChange,\n        onFocus: this.selectOnFocus,\n        onKeyDown: this.handleKeys,\n        onKeyPress: this.props.onKeyPress,\n        onKeyUp: this.props.onKeyUp,\n        placeholder: this.props.placeholder,\n        ref: this.createRefWithAutoFocus,\n        value: this.props.value\n      });\n    });\n\n    _defineProperty(this, \"renderStatic\", () => {\n      const {\n        placeholder,\n        readOnlyValue,\n        requireDoubleClick,\n        value\n      } = this.props;\n      const showPlaceholder = placeholder && !value;\n      const displayValue = readOnlyValue !== undefined ? readOnlyValue : value;\n      const className = showPlaceholder ? 'placeholder' : '';\n      const eventHandlers = {};\n\n      if (!requireDoubleClick) {\n        eventHandlers.onClick = this.handleToggleEditing;\n      }\n\n      return /*#__PURE__*/_jsx(\"span\", _objectSpread(_objectSpread({\n        className: className\n      }, eventHandlers), {}, {\n        children: showPlaceholder ? placeholder : displayValue\n      }));\n    });\n\n    _defineProperty(this, \"renderEditor\", () => {\n      switch (this.getEditorType()) {\n        case 'boolean':\n          return this.renderBoolean();\n\n        case 'slider':\n          return this.renderSlider();\n\n        case 'multiline':\n          return this.renderMultiline();\n\n        case 'number':\n          return this.renderNumber();\n\n        default:\n          return this.renderText();\n      }\n    });\n\n    _defineProperty(this, \"render\", () => {\n      const {\n        className,\n        readOnly,\n        requireDoubleClick\n      } = this.props;\n      const classes = ['editable', this.editing ? 'editing' : '', className || '', readOnly ? 'readonly' : ''].filter(Boolean);\n      const props = {};\n\n      if (!readOnly && !this.editing) {\n        if (requireDoubleClick) {\n          props.onDoubleClick = this.handleToggleEditing;\n        } else {\n          props.tabIndex = '0';\n          props.onFocus = this.handleReceivingFocus;\n        }\n      }\n\n      return /*#__PURE__*/_jsx(\"div\", _objectSpread(_objectSpread({\n        className: classes.join(' ')\n      }, props), {}, {\n        children: this.renderEditor()\n      }));\n    });\n  }\n\n  get editing() {\n    return this.props.forceEditMode || this.state.editing;\n  }\n\n}\n\n_defineProperty(Editable, \"displayName\", 'Editable');\n\n_defineProperty(Editable, \"defaultProps\", {\n  className: '',\n  forceEditMode: false,\n  max: undefined,\n  min: undefined,\n  onChange: noop,\n  onEditEnd: noop,\n  onEditStart: noop,\n  onKeyDown: noop,\n  onKeyPress: noop,\n  onKeyUp: noop,\n  placeholder: '',\n  readOnly: false,\n  readOnlyValue: undefined,\n  requireDoubleClick: false,\n  step: 1,\n  type: undefined,\n  value: ''\n});","map":null,"metadata":{},"sourceType":"module"}