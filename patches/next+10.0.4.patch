diff --git a/node_modules/next/dist/lib/verifyTypeScriptSetup.js b/node_modules/next/dist/lib/verifyTypeScriptSetup.js
index 7a1b618..874ddb5 100644
--- a/node_modules/next/dist/lib/verifyTypeScriptSetup.js
+++ b/node_modules/next/dist/lib/verifyTypeScriptSetup.js
@@ -2,9 +2,10 @@
 const intent=await(0,_getTypeScriptIntent.getTypeScriptIntent)(dir,pagesDir);if(!intent){return false;}const firstTimeSetup=intent.firstTimeSetup;// Ensure TypeScript and necessary `@types/*` are installed:
 const deps=await(0,_hasNecessaryDependencies.hasNecessaryDependencies)(dir);// Load TypeScript after we're sure it exists:
 const ts=await Promise.resolve(`${deps.resolvedTypeScript}`).then(s=>_interopRequireWildcard(require(s)));// Reconfigure (or create) the user's `tsconfig.json` for them:
-await(0,_writeConfigurationDefaults.writeConfigurationDefaults)(ts,tsConfigPath,firstTimeSetup);// Write out the necessary `next-env.d.ts` file to correctly register
+// await(0,_writeConfigurationDefaults.writeConfigurationDefaults)(ts,tsConfigPath,firstTimeSetup);// Write out the necessary `next-env.d.ts` file to correctly register
 // Next.js' types:
-await(0,_writeAppTypeDeclarations.writeAppTypeDeclarations)(dir);if(typeCheckPreflight){// Verify the project passes type-checking before we go to webpack phase:
+// await(0,_writeAppTypeDeclarations.writeAppTypeDeclarations)(dir);
+if(typeCheckPreflight){// Verify the project passes type-checking before we go to webpack phase:
 return await(0,_runTypeCheck.runTypeCheck)(ts,dir,tsConfigPath);}return true;}catch(err){// These are special errors that should not show a stack trace:
 if(err instanceof _TypeScriptCompileError.TypeScriptCompileError){console.error(_chalk.default.red('Failed to compile.\n'));console.error(err.message);process.exit(1);}else if(err instanceof _FatalTypeScriptError.FatalTypeScriptError){console.error(err.message);process.exit(1);}throw err;}}
 //# sourceMappingURL=verifyTypeScriptSetup.js.map
